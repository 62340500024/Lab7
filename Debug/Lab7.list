
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004070  08004070  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004078  08004078  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000010  0800408c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  0800408c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cf0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016eb  00000000  00000000  00029d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0002b418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  0002bf60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015460  00000000  00000000  0002c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076f1  00000000  00000000  00041e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008891a  00000000  00000000  00049541  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1e5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003138  00000000  00000000  000d1ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004040 	.word	0x08004040

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08004040 	.word	0x08004040

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000294:	f1a2 0201 	sub.w	r2, r2, #1
 8000298:	d1ed      	bne.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b996 	b.w	8000738 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f82a 	bl	800046c <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__aeabi_f2ulz>:
 8000424:	b5d0      	push	{r4, r6, r7, lr}
 8000426:	f000 faed 	bl	8000a04 <__aeabi_f2d>
 800042a:	2200      	movs	r2, #0
 800042c:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <__aeabi_f2ulz+0x40>)
 800042e:	4606      	mov	r6, r0
 8000430:	460f      	mov	r7, r1
 8000432:	f000 fb3f 	bl	8000ab4 <__aeabi_dmul>
 8000436:	f000 fd4f 	bl	8000ed8 <__aeabi_d2uiz>
 800043a:	4604      	mov	r4, r0
 800043c:	f000 fac0 	bl	80009c0 <__aeabi_ui2d>
 8000440:	2200      	movs	r2, #0
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <__aeabi_f2ulz+0x44>)
 8000444:	f000 fb36 	bl	8000ab4 <__aeabi_dmul>
 8000448:	4602      	mov	r2, r0
 800044a:	460b      	mov	r3, r1
 800044c:	4630      	mov	r0, r6
 800044e:	4639      	mov	r1, r7
 8000450:	f000 f978 	bl	8000744 <__aeabi_dsub>
 8000454:	f000 fd40 	bl	8000ed8 <__aeabi_d2uiz>
 8000458:	2200      	movs	r2, #0
 800045a:	4623      	mov	r3, r4
 800045c:	4310      	orrs	r0, r2
 800045e:	4619      	mov	r1, r3
 8000460:	bdd0      	pop	{r4, r6, r7, pc}
 8000462:	bf00      	nop
 8000464:	3df00000 	.word	0x3df00000
 8000468:	41f00000 	.word	0x41f00000

0800046c <__udivmoddi4>:
 800046c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000470:	9e08      	ldr	r6, [sp, #32]
 8000472:	4604      	mov	r4, r0
 8000474:	4688      	mov	r8, r1
 8000476:	2b00      	cmp	r3, #0
 8000478:	d14b      	bne.n	8000512 <__udivmoddi4+0xa6>
 800047a:	428a      	cmp	r2, r1
 800047c:	4615      	mov	r5, r2
 800047e:	d967      	bls.n	8000550 <__udivmoddi4+0xe4>
 8000480:	fab2 f282 	clz	r2, r2
 8000484:	b14a      	cbz	r2, 800049a <__udivmoddi4+0x2e>
 8000486:	f1c2 0720 	rsb	r7, r2, #32
 800048a:	fa01 f302 	lsl.w	r3, r1, r2
 800048e:	fa20 f707 	lsr.w	r7, r0, r7
 8000492:	4095      	lsls	r5, r2
 8000494:	ea47 0803 	orr.w	r8, r7, r3
 8000498:	4094      	lsls	r4, r2
 800049a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049e:	0c23      	lsrs	r3, r4, #16
 80004a0:	fbb8 f7fe 	udiv	r7, r8, lr
 80004a4:	fa1f fc85 	uxth.w	ip, r5
 80004a8:	fb0e 8817 	mls	r8, lr, r7, r8
 80004ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b0:	fb07 f10c 	mul.w	r1, r7, ip
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x60>
 80004b8:	18eb      	adds	r3, r5, r3
 80004ba:	f107 30ff 	add.w	r0, r7, #4294967295
 80004be:	f080 811b 	bcs.w	80006f8 <__udivmoddi4+0x28c>
 80004c2:	4299      	cmp	r1, r3
 80004c4:	f240 8118 	bls.w	80006f8 <__udivmoddi4+0x28c>
 80004c8:	3f02      	subs	r7, #2
 80004ca:	442b      	add	r3, r5
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb00 fc0c 	mul.w	ip, r0, ip
 80004e0:	45a4      	cmp	ip, r4
 80004e2:	d909      	bls.n	80004f8 <__udivmoddi4+0x8c>
 80004e4:	192c      	adds	r4, r5, r4
 80004e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80004ea:	f080 8107 	bcs.w	80006fc <__udivmoddi4+0x290>
 80004ee:	45a4      	cmp	ip, r4
 80004f0:	f240 8104 	bls.w	80006fc <__udivmoddi4+0x290>
 80004f4:	3802      	subs	r0, #2
 80004f6:	442c      	add	r4, r5
 80004f8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80004fc:	eba4 040c 	sub.w	r4, r4, ip
 8000500:	2700      	movs	r7, #0
 8000502:	b11e      	cbz	r6, 800050c <__udivmoddi4+0xa0>
 8000504:	40d4      	lsrs	r4, r2
 8000506:	2300      	movs	r3, #0
 8000508:	e9c6 4300 	strd	r4, r3, [r6]
 800050c:	4639      	mov	r1, r7
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	428b      	cmp	r3, r1
 8000514:	d909      	bls.n	800052a <__udivmoddi4+0xbe>
 8000516:	2e00      	cmp	r6, #0
 8000518:	f000 80eb 	beq.w	80006f2 <__udivmoddi4+0x286>
 800051c:	2700      	movs	r7, #0
 800051e:	e9c6 0100 	strd	r0, r1, [r6]
 8000522:	4638      	mov	r0, r7
 8000524:	4639      	mov	r1, r7
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	fab3 f783 	clz	r7, r3
 800052e:	2f00      	cmp	r7, #0
 8000530:	d147      	bne.n	80005c2 <__udivmoddi4+0x156>
 8000532:	428b      	cmp	r3, r1
 8000534:	d302      	bcc.n	800053c <__udivmoddi4+0xd0>
 8000536:	4282      	cmp	r2, r0
 8000538:	f200 80fa 	bhi.w	8000730 <__udivmoddi4+0x2c4>
 800053c:	1a84      	subs	r4, r0, r2
 800053e:	eb61 0303 	sbc.w	r3, r1, r3
 8000542:	2001      	movs	r0, #1
 8000544:	4698      	mov	r8, r3
 8000546:	2e00      	cmp	r6, #0
 8000548:	d0e0      	beq.n	800050c <__udivmoddi4+0xa0>
 800054a:	e9c6 4800 	strd	r4, r8, [r6]
 800054e:	e7dd      	b.n	800050c <__udivmoddi4+0xa0>
 8000550:	b902      	cbnz	r2, 8000554 <__udivmoddi4+0xe8>
 8000552:	deff      	udf	#255	; 0xff
 8000554:	fab2 f282 	clz	r2, r2
 8000558:	2a00      	cmp	r2, #0
 800055a:	f040 808f 	bne.w	800067c <__udivmoddi4+0x210>
 800055e:	1b49      	subs	r1, r1, r5
 8000560:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000564:	fa1f f885 	uxth.w	r8, r5
 8000568:	2701      	movs	r7, #1
 800056a:	fbb1 fcfe 	udiv	ip, r1, lr
 800056e:	0c23      	lsrs	r3, r4, #16
 8000570:	fb0e 111c 	mls	r1, lr, ip, r1
 8000574:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000578:	fb08 f10c 	mul.w	r1, r8, ip
 800057c:	4299      	cmp	r1, r3
 800057e:	d907      	bls.n	8000590 <__udivmoddi4+0x124>
 8000580:	18eb      	adds	r3, r5, r3
 8000582:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000586:	d202      	bcs.n	800058e <__udivmoddi4+0x122>
 8000588:	4299      	cmp	r1, r3
 800058a:	f200 80cd 	bhi.w	8000728 <__udivmoddi4+0x2bc>
 800058e:	4684      	mov	ip, r0
 8000590:	1a59      	subs	r1, r3, r1
 8000592:	b2a3      	uxth	r3, r4
 8000594:	fbb1 f0fe 	udiv	r0, r1, lr
 8000598:	fb0e 1410 	mls	r4, lr, r0, r1
 800059c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005a0:	fb08 f800 	mul.w	r8, r8, r0
 80005a4:	45a0      	cmp	r8, r4
 80005a6:	d907      	bls.n	80005b8 <__udivmoddi4+0x14c>
 80005a8:	192c      	adds	r4, r5, r4
 80005aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80005ae:	d202      	bcs.n	80005b6 <__udivmoddi4+0x14a>
 80005b0:	45a0      	cmp	r8, r4
 80005b2:	f200 80b6 	bhi.w	8000722 <__udivmoddi4+0x2b6>
 80005b6:	4618      	mov	r0, r3
 80005b8:	eba4 0408 	sub.w	r4, r4, r8
 80005bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005c0:	e79f      	b.n	8000502 <__udivmoddi4+0x96>
 80005c2:	f1c7 0c20 	rsb	ip, r7, #32
 80005c6:	40bb      	lsls	r3, r7
 80005c8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005cc:	ea4e 0e03 	orr.w	lr, lr, r3
 80005d0:	fa01 f407 	lsl.w	r4, r1, r7
 80005d4:	fa20 f50c 	lsr.w	r5, r0, ip
 80005d8:	fa21 f30c 	lsr.w	r3, r1, ip
 80005dc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005e0:	4325      	orrs	r5, r4
 80005e2:	fbb3 f9f8 	udiv	r9, r3, r8
 80005e6:	0c2c      	lsrs	r4, r5, #16
 80005e8:	fb08 3319 	mls	r3, r8, r9, r3
 80005ec:	fa1f fa8e 	uxth.w	sl, lr
 80005f0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80005f4:	fb09 f40a 	mul.w	r4, r9, sl
 80005f8:	429c      	cmp	r4, r3
 80005fa:	fa02 f207 	lsl.w	r2, r2, r7
 80005fe:	fa00 f107 	lsl.w	r1, r0, r7
 8000602:	d90b      	bls.n	800061c <__udivmoddi4+0x1b0>
 8000604:	eb1e 0303 	adds.w	r3, lr, r3
 8000608:	f109 30ff 	add.w	r0, r9, #4294967295
 800060c:	f080 8087 	bcs.w	800071e <__udivmoddi4+0x2b2>
 8000610:	429c      	cmp	r4, r3
 8000612:	f240 8084 	bls.w	800071e <__udivmoddi4+0x2b2>
 8000616:	f1a9 0902 	sub.w	r9, r9, #2
 800061a:	4473      	add	r3, lr
 800061c:	1b1b      	subs	r3, r3, r4
 800061e:	b2ad      	uxth	r5, r5
 8000620:	fbb3 f0f8 	udiv	r0, r3, r8
 8000624:	fb08 3310 	mls	r3, r8, r0, r3
 8000628:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800062c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000630:	45a2      	cmp	sl, r4
 8000632:	d908      	bls.n	8000646 <__udivmoddi4+0x1da>
 8000634:	eb1e 0404 	adds.w	r4, lr, r4
 8000638:	f100 33ff 	add.w	r3, r0, #4294967295
 800063c:	d26b      	bcs.n	8000716 <__udivmoddi4+0x2aa>
 800063e:	45a2      	cmp	sl, r4
 8000640:	d969      	bls.n	8000716 <__udivmoddi4+0x2aa>
 8000642:	3802      	subs	r0, #2
 8000644:	4474      	add	r4, lr
 8000646:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800064a:	fba0 8902 	umull	r8, r9, r0, r2
 800064e:	eba4 040a 	sub.w	r4, r4, sl
 8000652:	454c      	cmp	r4, r9
 8000654:	46c2      	mov	sl, r8
 8000656:	464b      	mov	r3, r9
 8000658:	d354      	bcc.n	8000704 <__udivmoddi4+0x298>
 800065a:	d051      	beq.n	8000700 <__udivmoddi4+0x294>
 800065c:	2e00      	cmp	r6, #0
 800065e:	d069      	beq.n	8000734 <__udivmoddi4+0x2c8>
 8000660:	ebb1 050a 	subs.w	r5, r1, sl
 8000664:	eb64 0403 	sbc.w	r4, r4, r3
 8000668:	fa04 fc0c 	lsl.w	ip, r4, ip
 800066c:	40fd      	lsrs	r5, r7
 800066e:	40fc      	lsrs	r4, r7
 8000670:	ea4c 0505 	orr.w	r5, ip, r5
 8000674:	e9c6 5400 	strd	r5, r4, [r6]
 8000678:	2700      	movs	r7, #0
 800067a:	e747      	b.n	800050c <__udivmoddi4+0xa0>
 800067c:	f1c2 0320 	rsb	r3, r2, #32
 8000680:	fa20 f703 	lsr.w	r7, r0, r3
 8000684:	4095      	lsls	r5, r2
 8000686:	fa01 f002 	lsl.w	r0, r1, r2
 800068a:	fa21 f303 	lsr.w	r3, r1, r3
 800068e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000692:	4338      	orrs	r0, r7
 8000694:	0c01      	lsrs	r1, r0, #16
 8000696:	fbb3 f7fe 	udiv	r7, r3, lr
 800069a:	fa1f f885 	uxth.w	r8, r5
 800069e:	fb0e 3317 	mls	r3, lr, r7, r3
 80006a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006a6:	fb07 f308 	mul.w	r3, r7, r8
 80006aa:	428b      	cmp	r3, r1
 80006ac:	fa04 f402 	lsl.w	r4, r4, r2
 80006b0:	d907      	bls.n	80006c2 <__udivmoddi4+0x256>
 80006b2:	1869      	adds	r1, r5, r1
 80006b4:	f107 3cff 	add.w	ip, r7, #4294967295
 80006b8:	d22f      	bcs.n	800071a <__udivmoddi4+0x2ae>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d92d      	bls.n	800071a <__udivmoddi4+0x2ae>
 80006be:	3f02      	subs	r7, #2
 80006c0:	4429      	add	r1, r5
 80006c2:	1acb      	subs	r3, r1, r3
 80006c4:	b281      	uxth	r1, r0
 80006c6:	fbb3 f0fe 	udiv	r0, r3, lr
 80006ca:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d2:	fb00 f308 	mul.w	r3, r0, r8
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d907      	bls.n	80006ea <__udivmoddi4+0x27e>
 80006da:	1869      	adds	r1, r5, r1
 80006dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80006e0:	d217      	bcs.n	8000712 <__udivmoddi4+0x2a6>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d915      	bls.n	8000712 <__udivmoddi4+0x2a6>
 80006e6:	3802      	subs	r0, #2
 80006e8:	4429      	add	r1, r5
 80006ea:	1ac9      	subs	r1, r1, r3
 80006ec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80006f0:	e73b      	b.n	800056a <__udivmoddi4+0xfe>
 80006f2:	4637      	mov	r7, r6
 80006f4:	4630      	mov	r0, r6
 80006f6:	e709      	b.n	800050c <__udivmoddi4+0xa0>
 80006f8:	4607      	mov	r7, r0
 80006fa:	e6e7      	b.n	80004cc <__udivmoddi4+0x60>
 80006fc:	4618      	mov	r0, r3
 80006fe:	e6fb      	b.n	80004f8 <__udivmoddi4+0x8c>
 8000700:	4541      	cmp	r1, r8
 8000702:	d2ab      	bcs.n	800065c <__udivmoddi4+0x1f0>
 8000704:	ebb8 0a02 	subs.w	sl, r8, r2
 8000708:	eb69 020e 	sbc.w	r2, r9, lr
 800070c:	3801      	subs	r0, #1
 800070e:	4613      	mov	r3, r2
 8000710:	e7a4      	b.n	800065c <__udivmoddi4+0x1f0>
 8000712:	4660      	mov	r0, ip
 8000714:	e7e9      	b.n	80006ea <__udivmoddi4+0x27e>
 8000716:	4618      	mov	r0, r3
 8000718:	e795      	b.n	8000646 <__udivmoddi4+0x1da>
 800071a:	4667      	mov	r7, ip
 800071c:	e7d1      	b.n	80006c2 <__udivmoddi4+0x256>
 800071e:	4681      	mov	r9, r0
 8000720:	e77c      	b.n	800061c <__udivmoddi4+0x1b0>
 8000722:	3802      	subs	r0, #2
 8000724:	442c      	add	r4, r5
 8000726:	e747      	b.n	80005b8 <__udivmoddi4+0x14c>
 8000728:	f1ac 0c02 	sub.w	ip, ip, #2
 800072c:	442b      	add	r3, r5
 800072e:	e72f      	b.n	8000590 <__udivmoddi4+0x124>
 8000730:	4638      	mov	r0, r7
 8000732:	e708      	b.n	8000546 <__udivmoddi4+0xda>
 8000734:	4637      	mov	r7, r6
 8000736:	e6e9      	b.n	800050c <__udivmoddi4+0xa0>

08000738 <__aeabi_idiv0>:
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop

0800073c <__aeabi_drsub>:
 800073c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000740:	e002      	b.n	8000748 <__adddf3>
 8000742:	bf00      	nop

08000744 <__aeabi_dsub>:
 8000744:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000748 <__adddf3>:
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800074e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000752:	ea94 0f05 	teq	r4, r5
 8000756:	bf08      	it	eq
 8000758:	ea90 0f02 	teqeq	r0, r2
 800075c:	bf1f      	itttt	ne
 800075e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000762:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000766:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800076a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800076e:	f000 80e2 	beq.w	8000936 <__adddf3+0x1ee>
 8000772:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000776:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800077a:	bfb8      	it	lt
 800077c:	426d      	neglt	r5, r5
 800077e:	dd0c      	ble.n	800079a <__adddf3+0x52>
 8000780:	442c      	add	r4, r5
 8000782:	ea80 0202 	eor.w	r2, r0, r2
 8000786:	ea81 0303 	eor.w	r3, r1, r3
 800078a:	ea82 0000 	eor.w	r0, r2, r0
 800078e:	ea83 0101 	eor.w	r1, r3, r1
 8000792:	ea80 0202 	eor.w	r2, r0, r2
 8000796:	ea81 0303 	eor.w	r3, r1, r3
 800079a:	2d36      	cmp	r5, #54	; 0x36
 800079c:	bf88      	it	hi
 800079e:	bd30      	pophi	{r4, r5, pc}
 80007a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80007ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80007b0:	d002      	beq.n	80007b8 <__adddf3+0x70>
 80007b2:	4240      	negs	r0, r0
 80007b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80007bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80007c4:	d002      	beq.n	80007cc <__adddf3+0x84>
 80007c6:	4252      	negs	r2, r2
 80007c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007cc:	ea94 0f05 	teq	r4, r5
 80007d0:	f000 80a7 	beq.w	8000922 <__adddf3+0x1da>
 80007d4:	f1a4 0401 	sub.w	r4, r4, #1
 80007d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80007dc:	db0d      	blt.n	80007fa <__adddf3+0xb2>
 80007de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80007e2:	fa22 f205 	lsr.w	r2, r2, r5
 80007e6:	1880      	adds	r0, r0, r2
 80007e8:	f141 0100 	adc.w	r1, r1, #0
 80007ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80007f0:	1880      	adds	r0, r0, r2
 80007f2:	fa43 f305 	asr.w	r3, r3, r5
 80007f6:	4159      	adcs	r1, r3
 80007f8:	e00e      	b.n	8000818 <__adddf3+0xd0>
 80007fa:	f1a5 0520 	sub.w	r5, r5, #32
 80007fe:	f10e 0e20 	add.w	lr, lr, #32
 8000802:	2a01      	cmp	r2, #1
 8000804:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000808:	bf28      	it	cs
 800080a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800080e:	fa43 f305 	asr.w	r3, r3, r5
 8000812:	18c0      	adds	r0, r0, r3
 8000814:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800081c:	d507      	bpl.n	800082e <__adddf3+0xe6>
 800081e:	f04f 0e00 	mov.w	lr, #0
 8000822:	f1dc 0c00 	rsbs	ip, ip, #0
 8000826:	eb7e 0000 	sbcs.w	r0, lr, r0
 800082a:	eb6e 0101 	sbc.w	r1, lr, r1
 800082e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000832:	d31b      	bcc.n	800086c <__adddf3+0x124>
 8000834:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000838:	d30c      	bcc.n	8000854 <__adddf3+0x10c>
 800083a:	0849      	lsrs	r1, r1, #1
 800083c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000840:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000844:	f104 0401 	add.w	r4, r4, #1
 8000848:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800084c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000850:	f080 809a 	bcs.w	8000988 <__adddf3+0x240>
 8000854:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000858:	bf08      	it	eq
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	ea41 0105 	orr.w	r1, r1, r5
 800086a:	bd30      	pop	{r4, r5, pc}
 800086c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000870:	4140      	adcs	r0, r0
 8000872:	eb41 0101 	adc.w	r1, r1, r1
 8000876:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800087a:	f1a4 0401 	sub.w	r4, r4, #1
 800087e:	d1e9      	bne.n	8000854 <__adddf3+0x10c>
 8000880:	f091 0f00 	teq	r1, #0
 8000884:	bf04      	itt	eq
 8000886:	4601      	moveq	r1, r0
 8000888:	2000      	moveq	r0, #0
 800088a:	fab1 f381 	clz	r3, r1
 800088e:	bf08      	it	eq
 8000890:	3320      	addeq	r3, #32
 8000892:	f1a3 030b 	sub.w	r3, r3, #11
 8000896:	f1b3 0220 	subs.w	r2, r3, #32
 800089a:	da0c      	bge.n	80008b6 <__adddf3+0x16e>
 800089c:	320c      	adds	r2, #12
 800089e:	dd08      	ble.n	80008b2 <__adddf3+0x16a>
 80008a0:	f102 0c14 	add.w	ip, r2, #20
 80008a4:	f1c2 020c 	rsb	r2, r2, #12
 80008a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80008ac:	fa21 f102 	lsr.w	r1, r1, r2
 80008b0:	e00c      	b.n	80008cc <__adddf3+0x184>
 80008b2:	f102 0214 	add.w	r2, r2, #20
 80008b6:	bfd8      	it	le
 80008b8:	f1c2 0c20 	rsble	ip, r2, #32
 80008bc:	fa01 f102 	lsl.w	r1, r1, r2
 80008c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80008c4:	bfdc      	itt	le
 80008c6:	ea41 010c 	orrle.w	r1, r1, ip
 80008ca:	4090      	lslle	r0, r2
 80008cc:	1ae4      	subs	r4, r4, r3
 80008ce:	bfa2      	ittt	ge
 80008d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80008d4:	4329      	orrge	r1, r5
 80008d6:	bd30      	popge	{r4, r5, pc}
 80008d8:	ea6f 0404 	mvn.w	r4, r4
 80008dc:	3c1f      	subs	r4, #31
 80008de:	da1c      	bge.n	800091a <__adddf3+0x1d2>
 80008e0:	340c      	adds	r4, #12
 80008e2:	dc0e      	bgt.n	8000902 <__adddf3+0x1ba>
 80008e4:	f104 0414 	add.w	r4, r4, #20
 80008e8:	f1c4 0220 	rsb	r2, r4, #32
 80008ec:	fa20 f004 	lsr.w	r0, r0, r4
 80008f0:	fa01 f302 	lsl.w	r3, r1, r2
 80008f4:	ea40 0003 	orr.w	r0, r0, r3
 80008f8:	fa21 f304 	lsr.w	r3, r1, r4
 80008fc:	ea45 0103 	orr.w	r1, r5, r3
 8000900:	bd30      	pop	{r4, r5, pc}
 8000902:	f1c4 040c 	rsb	r4, r4, #12
 8000906:	f1c4 0220 	rsb	r2, r4, #32
 800090a:	fa20 f002 	lsr.w	r0, r0, r2
 800090e:	fa01 f304 	lsl.w	r3, r1, r4
 8000912:	ea40 0003 	orr.w	r0, r0, r3
 8000916:	4629      	mov	r1, r5
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	fa21 f004 	lsr.w	r0, r1, r4
 800091e:	4629      	mov	r1, r5
 8000920:	bd30      	pop	{r4, r5, pc}
 8000922:	f094 0f00 	teq	r4, #0
 8000926:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800092a:	bf06      	itte	eq
 800092c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000930:	3401      	addeq	r4, #1
 8000932:	3d01      	subne	r5, #1
 8000934:	e74e      	b.n	80007d4 <__adddf3+0x8c>
 8000936:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800093a:	bf18      	it	ne
 800093c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000940:	d029      	beq.n	8000996 <__adddf3+0x24e>
 8000942:	ea94 0f05 	teq	r4, r5
 8000946:	bf08      	it	eq
 8000948:	ea90 0f02 	teqeq	r0, r2
 800094c:	d005      	beq.n	800095a <__adddf3+0x212>
 800094e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000952:	bf04      	itt	eq
 8000954:	4619      	moveq	r1, r3
 8000956:	4610      	moveq	r0, r2
 8000958:	bd30      	pop	{r4, r5, pc}
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf1e      	ittt	ne
 8000960:	2100      	movne	r1, #0
 8000962:	2000      	movne	r0, #0
 8000964:	bd30      	popne	{r4, r5, pc}
 8000966:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800096a:	d105      	bne.n	8000978 <__adddf3+0x230>
 800096c:	0040      	lsls	r0, r0, #1
 800096e:	4149      	adcs	r1, r1
 8000970:	bf28      	it	cs
 8000972:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000976:	bd30      	pop	{r4, r5, pc}
 8000978:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800097c:	bf3c      	itt	cc
 800097e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000982:	bd30      	popcc	{r4, r5, pc}
 8000984:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000988:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800098c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000990:	f04f 0000 	mov.w	r0, #0
 8000994:	bd30      	pop	{r4, r5, pc}
 8000996:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800099a:	bf1a      	itte	ne
 800099c:	4619      	movne	r1, r3
 800099e:	4610      	movne	r0, r2
 80009a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80009a4:	bf1c      	itt	ne
 80009a6:	460b      	movne	r3, r1
 80009a8:	4602      	movne	r2, r0
 80009aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ae:	bf06      	itte	eq
 80009b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80009b4:	ea91 0f03 	teqeq	r1, r3
 80009b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80009bc:	bd30      	pop	{r4, r5, pc}
 80009be:	bf00      	nop

080009c0 <__aeabi_ui2d>:
 80009c0:	f090 0f00 	teq	r0, #0
 80009c4:	bf04      	itt	eq
 80009c6:	2100      	moveq	r1, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	b530      	push	{r4, r5, lr}
 80009cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009d4:	f04f 0500 	mov.w	r5, #0
 80009d8:	f04f 0100 	mov.w	r1, #0
 80009dc:	e750      	b.n	8000880 <__adddf3+0x138>
 80009de:	bf00      	nop

080009e0 <__aeabi_i2d>:
 80009e0:	f090 0f00 	teq	r0, #0
 80009e4:	bf04      	itt	eq
 80009e6:	2100      	moveq	r1, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	b530      	push	{r4, r5, lr}
 80009ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80009f8:	bf48      	it	mi
 80009fa:	4240      	negmi	r0, r0
 80009fc:	f04f 0100 	mov.w	r1, #0
 8000a00:	e73e      	b.n	8000880 <__adddf3+0x138>
 8000a02:	bf00      	nop

08000a04 <__aeabi_f2d>:
 8000a04:	0042      	lsls	r2, r0, #1
 8000a06:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000a0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000a12:	bf1f      	itttt	ne
 8000a14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000a18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000a1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000a20:	4770      	bxne	lr
 8000a22:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000a26:	bf08      	it	eq
 8000a28:	4770      	bxeq	lr
 8000a2a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000a2e:	bf04      	itt	eq
 8000a30:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000a34:	4770      	bxeq	lr
 8000a36:	b530      	push	{r4, r5, lr}
 8000a38:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000a3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a44:	e71c      	b.n	8000880 <__adddf3+0x138>
 8000a46:	bf00      	nop

08000a48 <__aeabi_ul2d>:
 8000a48:	ea50 0201 	orrs.w	r2, r0, r1
 8000a4c:	bf08      	it	eq
 8000a4e:	4770      	bxeq	lr
 8000a50:	b530      	push	{r4, r5, lr}
 8000a52:	f04f 0500 	mov.w	r5, #0
 8000a56:	e00a      	b.n	8000a6e <__aeabi_l2d+0x16>

08000a58 <__aeabi_l2d>:
 8000a58:	ea50 0201 	orrs.w	r2, r0, r1
 8000a5c:	bf08      	it	eq
 8000a5e:	4770      	bxeq	lr
 8000a60:	b530      	push	{r4, r5, lr}
 8000a62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000a66:	d502      	bpl.n	8000a6e <__aeabi_l2d+0x16>
 8000a68:	4240      	negs	r0, r0
 8000a6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a72:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000a7a:	f43f aed8 	beq.w	800082e <__adddf3+0xe6>
 8000a7e:	f04f 0203 	mov.w	r2, #3
 8000a82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a86:	bf18      	it	ne
 8000a88:	3203      	addne	r2, #3
 8000a8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a8e:	bf18      	it	ne
 8000a90:	3203      	addne	r2, #3
 8000a92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a96:	f1c2 0320 	rsb	r3, r2, #32
 8000a9a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa2:	fa01 fe03 	lsl.w	lr, r1, r3
 8000aa6:	ea40 000e 	orr.w	r0, r0, lr
 8000aaa:	fa21 f102 	lsr.w	r1, r1, r2
 8000aae:	4414      	add	r4, r2
 8000ab0:	e6bd      	b.n	800082e <__adddf3+0xe6>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dmul>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000abe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ac2:	bf1d      	ittte	ne
 8000ac4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ac8:	ea94 0f0c 	teqne	r4, ip
 8000acc:	ea95 0f0c 	teqne	r5, ip
 8000ad0:	f000 f8de 	bleq	8000c90 <__aeabi_dmul+0x1dc>
 8000ad4:	442c      	add	r4, r5
 8000ad6:	ea81 0603 	eor.w	r6, r1, r3
 8000ada:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000ade:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000ae2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000ae6:	bf18      	it	ne
 8000ae8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000aec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000af4:	d038      	beq.n	8000b68 <__aeabi_dmul+0xb4>
 8000af6:	fba0 ce02 	umull	ip, lr, r0, r2
 8000afa:	f04f 0500 	mov.w	r5, #0
 8000afe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000b02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000b06:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000b0a:	f04f 0600 	mov.w	r6, #0
 8000b0e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000b12:	f09c 0f00 	teq	ip, #0
 8000b16:	bf18      	it	ne
 8000b18:	f04e 0e01 	orrne.w	lr, lr, #1
 8000b1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000b20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000b24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000b28:	d204      	bcs.n	8000b34 <__aeabi_dmul+0x80>
 8000b2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000b2e:	416d      	adcs	r5, r5
 8000b30:	eb46 0606 	adc.w	r6, r6, r6
 8000b34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000b38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000b3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000b40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000b44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000b48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b4c:	bf88      	it	hi
 8000b4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b52:	d81e      	bhi.n	8000b92 <__aeabi_dmul+0xde>
 8000b54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000b5e:	f150 0000 	adcs.w	r0, r0, #0
 8000b62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000b6c:	ea46 0101 	orr.w	r1, r6, r1
 8000b70:	ea40 0002 	orr.w	r0, r0, r2
 8000b74:	ea81 0103 	eor.w	r1, r1, r3
 8000b78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000b7c:	bfc2      	ittt	gt
 8000b7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b86:	bd70      	popgt	{r4, r5, r6, pc}
 8000b88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8c:	f04f 0e00 	mov.w	lr, #0
 8000b90:	3c01      	subs	r4, #1
 8000b92:	f300 80ab 	bgt.w	8000cec <__aeabi_dmul+0x238>
 8000b96:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000b9a:	bfde      	ittt	le
 8000b9c:	2000      	movle	r0, #0
 8000b9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000ba2:	bd70      	pople	{r4, r5, r6, pc}
 8000ba4:	f1c4 0400 	rsb	r4, r4, #0
 8000ba8:	3c20      	subs	r4, #32
 8000baa:	da35      	bge.n	8000c18 <__aeabi_dmul+0x164>
 8000bac:	340c      	adds	r4, #12
 8000bae:	dc1b      	bgt.n	8000be8 <__aeabi_dmul+0x134>
 8000bb0:	f104 0414 	add.w	r4, r4, #20
 8000bb4:	f1c4 0520 	rsb	r5, r4, #32
 8000bb8:	fa00 f305 	lsl.w	r3, r0, r5
 8000bbc:	fa20 f004 	lsr.w	r0, r0, r4
 8000bc0:	fa01 f205 	lsl.w	r2, r1, r5
 8000bc4:	ea40 0002 	orr.w	r0, r0, r2
 8000bc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000bcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000bd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000bd4:	fa21 f604 	lsr.w	r6, r1, r4
 8000bd8:	eb42 0106 	adc.w	r1, r2, r6
 8000bdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
 8000be8:	f1c4 040c 	rsb	r4, r4, #12
 8000bec:	f1c4 0520 	rsb	r5, r4, #32
 8000bf0:	fa00 f304 	lsl.w	r3, r0, r4
 8000bf4:	fa20 f005 	lsr.w	r0, r0, r5
 8000bf8:	fa01 f204 	lsl.w	r2, r1, r4
 8000bfc:	ea40 0002 	orr.w	r0, r0, r2
 8000c00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c08:	f141 0100 	adc.w	r1, r1, #0
 8000c0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c10:	bf08      	it	eq
 8000c12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
 8000c18:	f1c4 0520 	rsb	r5, r4, #32
 8000c1c:	fa00 f205 	lsl.w	r2, r0, r5
 8000c20:	ea4e 0e02 	orr.w	lr, lr, r2
 8000c24:	fa20 f304 	lsr.w	r3, r0, r4
 8000c28:	fa01 f205 	lsl.w	r2, r1, r5
 8000c2c:	ea43 0302 	orr.w	r3, r3, r2
 8000c30:	fa21 f004 	lsr.w	r0, r1, r4
 8000c34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c38:	fa21 f204 	lsr.w	r2, r1, r4
 8000c3c:	ea20 0002 	bic.w	r0, r0, r2
 8000c40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000c44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c48:	bf08      	it	eq
 8000c4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	f094 0f00 	teq	r4, #0
 8000c54:	d10f      	bne.n	8000c76 <__aeabi_dmul+0x1c2>
 8000c56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000c5a:	0040      	lsls	r0, r0, #1
 8000c5c:	eb41 0101 	adc.w	r1, r1, r1
 8000c60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c64:	bf08      	it	eq
 8000c66:	3c01      	subeq	r4, #1
 8000c68:	d0f7      	beq.n	8000c5a <__aeabi_dmul+0x1a6>
 8000c6a:	ea41 0106 	orr.w	r1, r1, r6
 8000c6e:	f095 0f00 	teq	r5, #0
 8000c72:	bf18      	it	ne
 8000c74:	4770      	bxne	lr
 8000c76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	eb43 0303 	adc.w	r3, r3, r3
 8000c80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c84:	bf08      	it	eq
 8000c86:	3d01      	subeq	r5, #1
 8000c88:	d0f7      	beq.n	8000c7a <__aeabi_dmul+0x1c6>
 8000c8a:	ea43 0306 	orr.w	r3, r3, r6
 8000c8e:	4770      	bx	lr
 8000c90:	ea94 0f0c 	teq	r4, ip
 8000c94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c98:	bf18      	it	ne
 8000c9a:	ea95 0f0c 	teqne	r5, ip
 8000c9e:	d00c      	beq.n	8000cba <__aeabi_dmul+0x206>
 8000ca0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ca4:	bf18      	it	ne
 8000ca6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000caa:	d1d1      	bne.n	8000c50 <__aeabi_dmul+0x19c>
 8000cac:	ea81 0103 	eor.w	r1, r1, r3
 8000cb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cb4:	f04f 0000 	mov.w	r0, #0
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cbe:	bf06      	itte	eq
 8000cc0:	4610      	moveq	r0, r2
 8000cc2:	4619      	moveq	r1, r3
 8000cc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cc8:	d019      	beq.n	8000cfe <__aeabi_dmul+0x24a>
 8000cca:	ea94 0f0c 	teq	r4, ip
 8000cce:	d102      	bne.n	8000cd6 <__aeabi_dmul+0x222>
 8000cd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000cd4:	d113      	bne.n	8000cfe <__aeabi_dmul+0x24a>
 8000cd6:	ea95 0f0c 	teq	r5, ip
 8000cda:	d105      	bne.n	8000ce8 <__aeabi_dmul+0x234>
 8000cdc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ce0:	bf1c      	itt	ne
 8000ce2:	4610      	movne	r0, r2
 8000ce4:	4619      	movne	r1, r3
 8000ce6:	d10a      	bne.n	8000cfe <__aeabi_dmul+0x24a>
 8000ce8:	ea81 0103 	eor.w	r1, r1, r3
 8000cec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000cf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000cf8:	f04f 0000 	mov.w	r0, #0
 8000cfc:	bd70      	pop	{r4, r5, r6, pc}
 8000cfe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000d02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000d06:	bd70      	pop	{r4, r5, r6, pc}

08000d08 <__aeabi_ddiv>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000d12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000d16:	bf1d      	ittte	ne
 8000d18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000d1c:	ea94 0f0c 	teqne	r4, ip
 8000d20:	ea95 0f0c 	teqne	r5, ip
 8000d24:	f000 f8a7 	bleq	8000e76 <__aeabi_ddiv+0x16e>
 8000d28:	eba4 0405 	sub.w	r4, r4, r5
 8000d2c:	ea81 0e03 	eor.w	lr, r1, r3
 8000d30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000d38:	f000 8088 	beq.w	8000e4c <__aeabi_ddiv+0x144>
 8000d3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000d40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000d44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000d48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000d4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000d50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000d54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000d58:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000d5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000d60:	429d      	cmp	r5, r3
 8000d62:	bf08      	it	eq
 8000d64:	4296      	cmpeq	r6, r2
 8000d66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000d6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000d6e:	d202      	bcs.n	8000d76 <__aeabi_ddiv+0x6e>
 8000d70:	085b      	lsrs	r3, r3, #1
 8000d72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d76:	1ab6      	subs	r6, r6, r2
 8000d78:	eb65 0503 	sbc.w	r5, r5, r3
 8000d7c:	085b      	lsrs	r3, r3, #1
 8000d7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000d8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d92:	bf22      	ittt	cs
 8000d94:	1ab6      	subcs	r6, r6, r2
 8000d96:	4675      	movcs	r5, lr
 8000d98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d9c:	085b      	lsrs	r3, r3, #1
 8000d9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000da2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000da6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000daa:	bf22      	ittt	cs
 8000dac:	1ab6      	subcs	r6, r6, r2
 8000dae:	4675      	movcs	r5, lr
 8000db0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dba:	ebb6 0e02 	subs.w	lr, r6, r2
 8000dbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000dc2:	bf22      	ittt	cs
 8000dc4:	1ab6      	subcs	r6, r6, r2
 8000dc6:	4675      	movcs	r5, lr
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000dd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000dda:	bf22      	ittt	cs
 8000ddc:	1ab6      	subcs	r6, r6, r2
 8000dde:	4675      	movcs	r5, lr
 8000de0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000de4:	ea55 0e06 	orrs.w	lr, r5, r6
 8000de8:	d018      	beq.n	8000e1c <__aeabi_ddiv+0x114>
 8000dea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000dee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000df2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000df6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000dfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000dfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000e02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000e06:	d1c0      	bne.n	8000d8a <__aeabi_ddiv+0x82>
 8000e08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e0c:	d10b      	bne.n	8000e26 <__aeabi_ddiv+0x11e>
 8000e0e:	ea41 0100 	orr.w	r1, r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000e1a:	e7b6      	b.n	8000d8a <__aeabi_ddiv+0x82>
 8000e1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e20:	bf04      	itt	eq
 8000e22:	4301      	orreq	r1, r0
 8000e24:	2000      	moveq	r0, #0
 8000e26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000e2a:	bf88      	it	hi
 8000e2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000e30:	f63f aeaf 	bhi.w	8000b92 <__aeabi_dmul+0xde>
 8000e34:	ebb5 0c03 	subs.w	ip, r5, r3
 8000e38:	bf04      	itt	eq
 8000e3a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000e3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e42:	f150 0000 	adcs.w	r0, r0, #0
 8000e46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000e50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000e54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000e58:	bfc2      	ittt	gt
 8000e5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000e5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000e62:	bd70      	popgt	{r4, r5, r6, pc}
 8000e64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e68:	f04f 0e00 	mov.w	lr, #0
 8000e6c:	3c01      	subs	r4, #1
 8000e6e:	e690      	b.n	8000b92 <__aeabi_dmul+0xde>
 8000e70:	ea45 0e06 	orr.w	lr, r5, r6
 8000e74:	e68d      	b.n	8000b92 <__aeabi_dmul+0xde>
 8000e76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000e7a:	ea94 0f0c 	teq	r4, ip
 8000e7e:	bf08      	it	eq
 8000e80:	ea95 0f0c 	teqeq	r5, ip
 8000e84:	f43f af3b 	beq.w	8000cfe <__aeabi_dmul+0x24a>
 8000e88:	ea94 0f0c 	teq	r4, ip
 8000e8c:	d10a      	bne.n	8000ea4 <__aeabi_ddiv+0x19c>
 8000e8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000e92:	f47f af34 	bne.w	8000cfe <__aeabi_dmul+0x24a>
 8000e96:	ea95 0f0c 	teq	r5, ip
 8000e9a:	f47f af25 	bne.w	8000ce8 <__aeabi_dmul+0x234>
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	e72c      	b.n	8000cfe <__aeabi_dmul+0x24a>
 8000ea4:	ea95 0f0c 	teq	r5, ip
 8000ea8:	d106      	bne.n	8000eb8 <__aeabi_ddiv+0x1b0>
 8000eaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000eae:	f43f aefd 	beq.w	8000cac <__aeabi_dmul+0x1f8>
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	e722      	b.n	8000cfe <__aeabi_dmul+0x24a>
 8000eb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ebc:	bf18      	it	ne
 8000ebe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ec2:	f47f aec5 	bne.w	8000c50 <__aeabi_dmul+0x19c>
 8000ec6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000eca:	f47f af0d 	bne.w	8000ce8 <__aeabi_dmul+0x234>
 8000ece:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ed2:	f47f aeeb 	bne.w	8000cac <__aeabi_dmul+0x1f8>
 8000ed6:	e712      	b.n	8000cfe <__aeabi_dmul+0x24a>

08000ed8 <__aeabi_d2uiz>:
 8000ed8:	004a      	lsls	r2, r1, #1
 8000eda:	d211      	bcs.n	8000f00 <__aeabi_d2uiz+0x28>
 8000edc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ee0:	d211      	bcs.n	8000f06 <__aeabi_d2uiz+0x2e>
 8000ee2:	d50d      	bpl.n	8000f00 <__aeabi_d2uiz+0x28>
 8000ee4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ee8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000eec:	d40e      	bmi.n	8000f0c <__aeabi_d2uiz+0x34>
 8000eee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000efa:	fa23 f002 	lsr.w	r0, r3, r2
 8000efe:	4770      	bx	lr
 8000f00:	f04f 0000 	mov.w	r0, #0
 8000f04:	4770      	bx	lr
 8000f06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f0a:	d102      	bne.n	8000f12 <__aeabi_d2uiz+0x3a>
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	4770      	bx	lr
 8000f12:	f04f 0000 	mov.w	r0, #0
 8000f16:	4770      	bx	lr

08000f18 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000f1c:	ed2d 8b02 	vpush	{d8}
 8000f20:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f22:	f000 fda3 	bl	8001a6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f26:	f000 f85b 	bl	8000fe0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f2a:	f000 f9f5 	bl	8001318 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f2e:	f000 f9c9 	bl	80012c4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000f32:	f000 f8bf 	bl	80010b4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000f36:	f000 f915 	bl	8001164 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000f3a:	f000 f95f 	bl	80011fc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000f3e:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <main+0xac>)
 8000f40:	f001 fd41 	bl	80029c6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f44:	213c      	movs	r1, #60	; 0x3c
 8000f46:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <main+0xb0>)
 8000f48:	f001 fe50 	bl	8002bec <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	481f      	ldr	r0, [pc, #124]	; (8000fcc <main+0xb4>)
 8000f50:	f001 fd88 	bl	8002a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f54:	2104      	movs	r1, #4
 8000f56:	481d      	ldr	r0, [pc, #116]	; (8000fcc <main+0xb4>)
 8000f58:	f001 fd84 	bl	8002a64 <HAL_TIM_PWM_Start>
//		{
//			Timestamp_Encoder = micros();
//			EncoderVel = EncoderVelocity_Update();
//		}
//Add LPF?
		if (micros() - Timestamp_Encoder >= 1000) {
 8000f5c:	f000 fad0 	bl	8001500 <micros>
 8000f60:	460a      	mov	r2, r1
 8000f62:	4601      	mov	r1, r0
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <main+0xb8>)
 8000f66:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4614      	mov	r4, r2
 8000f6e:	ebb3 030b 	subs.w	r3, r3, fp
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	42a2      	cmp	r2, r4
 8000f80:	bf08      	it	eq
 8000f82:	4299      	cmpeq	r1, r3
 8000f84:	d2ea      	bcs.n	8000f5c <main+0x44>
			Timestamp_Encoder = micros();
 8000f86:	f000 fabb 	bl	8001500 <micros>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460c      	mov	r4, r1
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <main+0xb8>)
 8000f90:	e9c2 3400 	strd	r3, r4, [r2]
			EncoderVel = (EncoderVel * 999 + EncoderVelocity_Update()) / 1000.0;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <main+0xbc>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000fd8 <main+0xc0>
 8000f9e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000fa2:	f000 fa29 	bl	80013f8 <EncoderVelocity_Update>
 8000fa6:	eef0 7a40 	vmov.f32	s15, s0
 8000faa:	ee38 7a27 	vadd.f32	s14, s16, s15
 8000fae:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000fdc <main+0xc4>
 8000fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <main+0xbc>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]
			control_interrupt();
 8000fbc:	f000 faba 	bl	8001534 <control_interrupt>
		if (micros() - Timestamp_Encoder >= 1000) {
 8000fc0:	e7cc      	b.n	8000f5c <main+0x44>
 8000fc2:	bf00      	nop
 8000fc4:	200000fc 	.word	0x200000fc
 8000fc8:	200000bc 	.word	0x200000bc
 8000fcc:	2000007c 	.word	0x2000007c
 8000fd0:	20000040 	.word	0x20000040
 8000fd4:	20000038 	.word	0x20000038
 8000fd8:	4479c000 	.word	0x4479c000
 8000fdc:	447a0000 	.word	0x447a0000

08000fe0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	; 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 f81e 	bl	8004030 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <SystemClock_Config+0xcc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <SystemClock_Config+0xcc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <SystemClock_Config+0xd0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <SystemClock_Config+0xd0>)
 800102a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	2310      	movs	r3, #16
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001050:	2310      	movs	r3, #16
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001054:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800105a:	2304      	movs	r3, #4
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800105e:	2304      	movs	r3, #4
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	4618      	mov	r0, r3
 8001068:	f001 f820 	bl	80020ac <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x96>
		Error_Handler();
 8001072:	f000 fb49 	bl	8001708 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001076:	230f      	movs	r3, #15
 8001078:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107a:	2302      	movs	r3, #2
 800107c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2102      	movs	r1, #2
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fa7a 	bl	800258c <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xc2>
		Error_Handler();
 800109e:	f000 fb33 	bl	8001708 <Error_Handler>
	}
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	; 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2224      	movs	r2, #36	; 0x24
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 ffb4 	bl	8004030 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_TIM1_Init+0xa8>)
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <MX_TIM1_Init+0xac>)
 80010d4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_TIM1_Init+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_TIM1_Init+0xa8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3072;
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <MX_TIM1_Init+0xa8>)
 80010e4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80010e8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_TIM1_Init+0xa8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_TIM1_Init+0xa8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_TIM1_Init+0xa8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010fc:	2303      	movs	r3, #3
 80010fe:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001104:	2301      	movs	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001114:	2301      	movs	r3, #1
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_TIM1_Init+0xa8>)
 8001128:	f001 fcce 	bl	8002ac8 <HAL_TIM_Encoder_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0x82>
		Error_Handler();
 8001132:	f000 fae9 	bl	8001708 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_TIM1_Init+0xa8>)
 8001144:	f002 fb04 	bl	8003750 <HAL_TIMEx_MasterConfigSynchronization>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800114e:	f000 fadb 	bl	8001708 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3730      	adds	r7, #48	; 0x30
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000bc 	.word	0x200000bc
 8001160:	40010000 	.word	0x40010000

08001164 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_TIM2_Init+0x94>)
 8001182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001186:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_TIM2_Init+0x94>)
 800118a:	2263      	movs	r2, #99	; 0x63
 800118c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM2_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_TIM2_Init+0x94>)
 8001196:	f04f 32ff 	mov.w	r2, #4294967295
 800119a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_TIM2_Init+0x94>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_TIM2_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <MX_TIM2_Init+0x94>)
 80011aa:	f001 fbe1 	bl	8002970 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x54>
		Error_Handler();
 80011b4:	f000 faa8 	bl	8001708 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM2_Init+0x94>)
 80011c6:	f001 ff17 	bl	8002ff8 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0x70>
		Error_Handler();
 80011d0:	f000 fa9a 	bl	8001708 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80011dc:	463b      	mov	r3, r7
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM2_Init+0x94>)
 80011e2:	f002 fab5 	bl	8003750 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80011ec:	f000 fa8c 	bl	8001708 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200000fc 	.word	0x200000fc

080011fc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <MX_TIM3_Init+0xc0>)
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <MX_TIM3_Init+0xc4>)
 8001222:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <MX_TIM3_Init+0xc0>)
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <MX_TIM3_Init+0xc0>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000;
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <MX_TIM3_Init+0xc0>)
 8001232:	f242 7210 	movw	r2, #10000	; 0x2710
 8001236:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_TIM3_Init+0xc0>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <MX_TIM3_Init+0xc0>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001244:	481d      	ldr	r0, [pc, #116]	; (80012bc <MX_TIM3_Init+0xc0>)
 8001246:	f001 fbe2 	bl	8002a0e <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM3_Init+0x58>
		Error_Handler();
 8001250:	f000 fa5a 	bl	8001708 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4619      	mov	r1, r3
 8001262:	4816      	ldr	r0, [pc, #88]	; (80012bc <MX_TIM3_Init+0xc0>)
 8001264:	f002 fa74 	bl	8003750 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800126e:	f000 fa4b 	bl	8001708 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_TIM3_Init+0xc0>)
 800128a:	f001 fdef 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001294:	f000 fa38 	bl	8001708 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <MX_TIM3_Init+0xc0>)
 80012a0:	f001 fde4 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80012aa:	f000 fa2d 	bl	8001708 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <MX_TIM3_Init+0xc0>)
 80012b0:	f000 fae6 	bl	8001880 <HAL_TIM_MspPostInit>

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000007c 	.word	0x2000007c
 80012c0:	40000400 	.word	0x40000400

080012c4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <MX_USART2_UART_Init+0x50>)
 80012cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012fc:	f002 faaa 	bl	8003854 <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001306:	f000 f9ff 	bl	8001708 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000013c 	.word	0x2000013c
 8001314:	40004400 	.word	0x40004400

08001318 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <MX_GPIO_Init+0xd0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <MX_GPIO_Init+0xd0>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <MX_GPIO_Init+0xd0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <MX_GPIO_Init+0xd0>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <MX_GPIO_Init+0xd0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_GPIO_Init+0xd0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a1e      	ldr	r2, [pc, #120]	; (80013e8 <MX_GPIO_Init+0xd0>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_GPIO_Init+0xd0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_GPIO_Init+0xd0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <MX_GPIO_Init+0xd0>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_GPIO_Init+0xd0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2120      	movs	r1, #32
 80013a2:	4812      	ldr	r0, [pc, #72]	; (80013ec <MX_GPIO_Init+0xd4>)
 80013a4:	f000 fe68 	bl	8002078 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_GPIO_Init+0xd8>)
 80013b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_GPIO_Init+0xdc>)
 80013be:	f000 fcd9 	bl	8001d74 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80013c2:	2320      	movs	r3, #32
 80013c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_GPIO_Init+0xd4>)
 80013da:	f000 fccb 	bl	8001d74 <HAL_GPIO_Init>

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	10210000 	.word	0x10210000
 80013f4:	40020800 	.word	0x40020800

080013f8 <EncoderVelocity_Update>:
/* USER CODE BEGIN 4 */
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 3072

float EncoderVelocity_Update() {
 80013f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80013fc:	ed2d 8b02 	vpush	{d8}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <EncoderVelocity_Update+0xb8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 800140c:	f000 f878 	bl	8001500 <micros>
 8001410:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <EncoderVelocity_Update+0xbc>)
 8001416:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800141a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800141e:	460b      	mov	r3, r1
 8001420:	4614      	mov	r4, r2
 8001422:	ebb3 030b 	subs.w	r3, r3, fp
 8001426:	eb64 040c 	sbc.w	r4, r4, ip
 800142a:	e9c7 3400 	strd	r3, r4, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <EncoderVelocity_Update+0xc0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW) {
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800143e:	db04      	blt.n	800144a <EncoderVelocity_Update+0x52>
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	e008      	b.n	800145c <EncoderVelocity_Update+0x64>
	} else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW) {
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	425b      	negs	r3, r3
 800144e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001452:	db03      	blt.n	800145c <EncoderVelocity_Update+0x64>
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800145a:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <EncoderVelocity_Update+0xc0>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001462:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <EncoderVelocity_Update+0xbc>)
 8001464:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001468:	e9c2 3400 	strd	r3, r4, [r2]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return ((EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff * 60)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <EncoderVelocity_Update+0xc4>)
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800147c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001480:	f7fe ff72 	bl	8000368 <__aeabi_ul2f>
 8001484:	ee07 0a10 	vmov	s14, r0
 8001488:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800148c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80014c0 <EncoderVelocity_Update+0xc8>
 8001490:	ee67 7a87 	vmul.f32	s15, s15, s14
			/ (3072);
 8001494:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80014c4 <EncoderVelocity_Update+0xcc>
 8001498:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800149c:	eef0 7a66 	vmov.f32	s15, s13

}
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	ecbd 8b02 	vpop	{d8}
 80014ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80014b0:	200000bc 	.word	0x200000bc
 80014b4:	20000070 	.word	0x20000070
 80014b8:	20000078 	.word	0x20000078
 80014bc:	000f4240 	.word	0x000f4240
 80014c0:	42700000 	.word	0x42700000
 80014c4:	45400000 	.word	0x45400000

080014c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b490      	push	{r4, r7}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d109      	bne.n	80014ec <HAL_TIM_PeriodElapsedCallback+0x24>
		_micros += 4294967295;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014da:	e9d3 1200 	ldrd	r1, r2, [r3]
 80014de:	f111 33ff 	adds.w	r3, r1, #4294967295
 80014e2:	f142 0400 	adc.w	r4, r2, #0
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014e8:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc90      	pop	{r4, r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200000fc 	.word	0x200000fc
 80014fc:	20000030 	.word	0x20000030

08001500 <micros>:
uint64_t micros() {
 8001500:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001504:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <micros+0x2c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <micros+0x30>)
 8001514:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001518:	eb1b 0301 	adds.w	r3, fp, r1
 800151c:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001520:	4618      	mov	r0, r3
 8001522:	4621      	mov	r1, r4
 8001524:	46bd      	mov	sp, r7
 8001526:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800152a:	4770      	bx	lr
 800152c:	200000fc 	.word	0x200000fc
 8001530:	20000030 	.word	0x20000030

08001534 <control_interrupt>:

//double pu1=0,pe1=0,pe2=0;
void control_interrupt() {
 8001534:	b598      	push	{r3, r4, r7, lr}
 8001536:	af00      	add	r7, sp, #0
	if (r > 0) {
 8001538:	4b69      	ldr	r3, [pc, #420]	; (80016e0 <control_interrupt+0x1ac>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	dd5f      	ble.n	8001608 <control_interrupt+0xd4>
		error = r - EncoderVel;
 8001548:	4b65      	ldr	r3, [pc, #404]	; (80016e0 <control_interrupt+0x1ac>)
 800154a:	ed93 7a00 	vldr	s14, [r3]
 800154e:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <control_interrupt+0x1b0>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001558:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <control_interrupt+0x1b4>)
 800155a:	edc3 7a00 	vstr	s15, [r3]
		sum_error = sum_error + error;
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <control_interrupt+0x1b8>)
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <control_interrupt+0x1b4>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <control_interrupt+0x1b8>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
		PWM1 = KP * error + KI * sum_error + KD * (error - perror);
 8001574:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <control_interrupt+0x1bc>)
 8001576:	ed93 7a00 	vldr	s14, [r3]
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <control_interrupt+0x1b4>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001584:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <control_interrupt+0x1c0>)
 8001586:	edd3 6a00 	vldr	s13, [r3]
 800158a:	4b58      	ldr	r3, [pc, #352]	; (80016ec <control_interrupt+0x1b8>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <control_interrupt+0x1b4>)
 800159a:	edd3 6a00 	vldr	s13, [r3]
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <control_interrupt+0x1c4>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015a8:	4b54      	ldr	r3, [pc, #336]	; (80016fc <control_interrupt+0x1c8>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	ee17 0a90 	vmov	r0, s15
 80015ba:	f7fe ff33 	bl	8000424 <__aeabi_f2ulz>
 80015be:	4603      	mov	r3, r0
 80015c0:	460c      	mov	r4, r1
 80015c2:	4a4f      	ldr	r2, [pc, #316]	; (8001700 <control_interrupt+0x1cc>)
 80015c4:	e9c2 3400 	strd	r3, r4, [r2]
		perror = error;
 80015c8:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <control_interrupt+0x1b4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <control_interrupt+0x1c4>)
 80015ce:	6013      	str	r3, [r2, #0]
		if (PWM1 > 10000) {
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <control_interrupt+0x1cc>)
 80015d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015d6:	f242 7110 	movw	r1, #10000	; 0x2710
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	42a2      	cmp	r2, r4
 80015e0:	bf08      	it	eq
 80015e2:	4299      	cmpeq	r1, r3
 80015e4:	d206      	bcs.n	80015f4 <control_interrupt+0xc0>
			PWM1 = 10000;
 80015e6:	4a46      	ldr	r2, [pc, #280]	; (8001700 <control_interrupt+0x1cc>)
 80015e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80015ec:	f04f 0400 	mov.w	r4, #0
 80015f0:	e9c2 3400 	strd	r3, r4, [r2]
		}
		htim3.Instance->CCR1 = PWM1;
 80015f4:	4b42      	ldr	r3, [pc, #264]	; (8001700 <control_interrupt+0x1cc>)
 80015f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015fa:	4a42      	ldr	r2, [pc, #264]	; (8001704 <control_interrupt+0x1d0>)
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	6353      	str	r3, [r2, #52]	; 0x34
		htim3.Instance->CCR2 = 0;
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <control_interrupt+0x1d0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (r < 0) {
 8001608:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <control_interrupt+0x1ac>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001616:	d400      	bmi.n	800161a <control_interrupt+0xe6>
//	pu1 = PWM1;
//	pe2 = pe1;
//	pe1 = error;
//

}
 8001618:	e05f      	b.n	80016da <control_interrupt+0x1a6>
		error = (r * -1) - (EncoderVel * -1);
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <control_interrupt+0x1b0>)
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <control_interrupt+0x1ac>)
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <control_interrupt+0x1b4>)
 800162c:	edc3 7a00 	vstr	s15, [r3]
		sum_error = sum_error + error;
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <control_interrupt+0x1b8>)
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <control_interrupt+0x1b4>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <control_interrupt+0x1b8>)
 8001642:	edc3 7a00 	vstr	s15, [r3]
		PWM1 = KP * error + KI * sum_error + KD * (error - perror);
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <control_interrupt+0x1bc>)
 8001648:	ed93 7a00 	vldr	s14, [r3]
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <control_interrupt+0x1b4>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <control_interrupt+0x1c0>)
 8001658:	edd3 6a00 	vldr	s13, [r3]
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <control_interrupt+0x1b8>)
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <control_interrupt+0x1b4>)
 800166c:	edd3 6a00 	vldr	s13, [r3]
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <control_interrupt+0x1c4>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <control_interrupt+0x1c8>)
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001688:	ee17 0a90 	vmov	r0, s15
 800168c:	f7fe feca 	bl	8000424 <__aeabi_f2ulz>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <control_interrupt+0x1cc>)
 8001696:	e9c2 3400 	strd	r3, r4, [r2]
		perror = error;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <control_interrupt+0x1b4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <control_interrupt+0x1c4>)
 80016a0:	6013      	str	r3, [r2, #0]
		if (PWM1 > 10000) {
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <control_interrupt+0x1cc>)
 80016a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016a8:	f242 7110 	movw	r1, #10000	; 0x2710
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	42a2      	cmp	r2, r4
 80016b2:	bf08      	it	eq
 80016b4:	4299      	cmpeq	r1, r3
 80016b6:	d206      	bcs.n	80016c6 <control_interrupt+0x192>
			PWM1 = 10000;
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <control_interrupt+0x1cc>)
 80016ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80016be:	f04f 0400 	mov.w	r4, #0
 80016c2:	e9c2 3400 	strd	r3, r4, [r2]
		htim3.Instance->CCR2 = PWM1;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <control_interrupt+0x1cc>)
 80016c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <control_interrupt+0x1d0>)
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	6393      	str	r3, [r2, #56]	; 0x38
		htim3.Instance->CCR1 = 0;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <control_interrupt+0x1d0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016da:	bf00      	nop
 80016dc:	bd98      	pop	{r3, r4, r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000005c 	.word	0x2000005c
 80016e4:	20000038 	.word	0x20000038
 80016e8:	20000058 	.word	0x20000058
 80016ec:	20000050 	.word	0x20000050
 80016f0:	20000060 	.word	0x20000060
 80016f4:	20000064 	.word	0x20000064
 80016f8:	20000054 	.word	0x20000054
 80016fc:	20000068 	.word	0x20000068
 8001700:	20000048 	.word	0x20000048
 8001704:	2000007c 	.word	0x2000007c

08001708 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800170e:	e7fe      	b.n	800170e <Error_Handler+0x6>

08001710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_MspInit+0x4c>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_MspInit+0x4c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_MspInit+0x4c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800174e:	2007      	movs	r0, #7
 8001750:	f000 face 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_TIM_Encoder_MspInit+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12c      	bne.n	80017dc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_TIM_Encoder_MspInit+0x88>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_TIM_Encoder_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_TIM_Encoder_MspInit+0x88>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_TIM_Encoder_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_TIM_Encoder_MspInit+0x8c>)
 80017d8:	f000 facc 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001800:	d115      	bne.n	800182e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_TIM_Base_MspInit+0x48>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_TIM_Base_MspInit+0x48>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_TIM_Base_MspInit+0x48>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	201c      	movs	r0, #28
 8001824:	f000 fa6f 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001828:	201c      	movs	r0, #28
 800182a:	f000 fa88 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_TIM_PWM_MspInit+0x3c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10d      	bne.n	800186a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_TIM_PWM_MspInit+0x40>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_TIM_PWM_MspInit+0x40>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_TIM_PWM_MspInit+0x40>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40000400 	.word	0x40000400
 800187c:	40023800 	.word	0x40023800

08001880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <HAL_TIM_MspPostInit+0x68>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d11d      	bne.n	80018de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_TIM_MspPostInit+0x6c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_TIM_MspPostInit+0x6c>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_TIM_MspPostInit+0x6c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018be:	23c0      	movs	r3, #192	; 0xc0
 80018c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <HAL_TIM_MspPostInit+0x70>)
 80018da:	f000 fa4b 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40000400 	.word	0x40000400
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000

080018f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_UART_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12b      	bne.n	800196e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_UART_MspInit+0x88>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_UART_MspInit+0x88>)
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_UART_MspInit+0x88>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_UART_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_UART_MspInit+0x88>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_UART_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800194e:	230c      	movs	r3, #12
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195e:	2307      	movs	r3, #7
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_UART_MspInit+0x8c>)
 800196a:	f000 fa03 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40004400 	.word	0x40004400
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 f89e 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM2_IRQHandler+0x10>)
 80019de:	f001 f93c 	bl	8002c5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200000fc 	.word	0x200000fc

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <SystemInit+0x28>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <SystemInit+0x28>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SystemInit+0x28>)
 8001a02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a06:	609a      	str	r2, [r3, #8]
#endif
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a1e:	e003      	b.n	8001a28 <LoopCopyDataInit>

08001a20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a26:	3104      	adds	r1, #4

08001a28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a30:	d3f6      	bcc.n	8001a20 <CopyDataInit>
  ldr  r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a34:	e002      	b.n	8001a3c <LoopFillZerobss>

08001a36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a38:	f842 3b04 	str.w	r3, [r2], #4

08001a3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a40:	d3f9      	bcc.n	8001a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a42:	f7ff ffd3 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f002 facf 	bl	8003fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7ff fa65 	bl	8000f18 <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a54:	08004080 	.word	0x08004080
  ldr  r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a5c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001a60:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001a64:	20000180 	.word	0x20000180

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f92b 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fe36 	bl	8001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f943 	bl	8001d5a <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f000 f90b 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008
 8001b34:	2000017c 	.word	0x2000017c

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	2000017c 	.word	0x2000017c

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff29 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff3e 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff8e 	bl	8001c44 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff31 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e159      	b.n	8002044 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8148 	bne.w	800203e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d00b      	beq.n	8001dce <HAL_GPIO_Init+0x5a>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d007      	beq.n	8001dce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dc2:	2b11      	cmp	r3, #17
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b12      	cmp	r3, #18
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0xfc>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b12      	cmp	r3, #18
 8001e6e:	d123      	bne.n	8001eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a2 	beq.w	800203e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b56      	ldr	r3, [pc, #344]	; (8002058 <HAL_GPIO_Init+0x2e4>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a55      	ldr	r2, [pc, #340]	; (8002058 <HAL_GPIO_Init+0x2e4>)
 8001f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b53      	ldr	r3, [pc, #332]	; (8002058 <HAL_GPIO_Init+0x2e4>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f16:	4a51      	ldr	r2, [pc, #324]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a48      	ldr	r2, [pc, #288]	; (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x202>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a47      	ldr	r2, [pc, #284]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x1fe>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a46      	ldr	r2, [pc, #280]	; (8002068 <HAL_GPIO_Init+0x2f4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x1fa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a45      	ldr	r2, [pc, #276]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a44      	ldr	r2, [pc, #272]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x1f2>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e008      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f76:	2300      	movs	r3, #0
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f002 0203 	and.w	r2, r2, #3
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4093      	lsls	r3, r2
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f88:	4934      	ldr	r1, [pc, #208]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f96:	4b37      	ldr	r3, [pc, #220]	; (8002074 <HAL_GPIO_Init+0x300>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fba:	4a2e      	ldr	r2, [pc, #184]	; (8002074 <HAL_GPIO_Init+0x300>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_GPIO_Init+0x300>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe4:	4a23      	ldr	r2, [pc, #140]	; (8002074 <HAL_GPIO_Init+0x300>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_GPIO_Init+0x300>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800200e:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_GPIO_Init+0x300>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_GPIO_Init+0x300>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_GPIO_Init+0x300>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	f67f aea2 	bls.w	8001d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800204c:	bf00      	nop
 800204e:	3724      	adds	r7, #36	; 0x24
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40023800 	.word	0x40023800
 800205c:	40013800 	.word	0x40013800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020800 	.word	0x40020800
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40021000 	.word	0x40021000
 8002074:	40013c00 	.word	0x40013c00

08002078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
 8002084:	4613      	mov	r3, r2
 8002086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	041a      	lsls	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	619a      	str	r2, [r3, #24]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e25b      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d075      	beq.n	80021b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ca:	4ba3      	ldr	r3, [pc, #652]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d00c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d6:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d112      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b9d      	ldr	r3, [pc, #628]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ee:	d10b      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	4b99      	ldr	r3, [pc, #612]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d05b      	beq.n	80021b4 <HAL_RCC_OscConfig+0x108>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d157      	bne.n	80021b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e236      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x74>
 8002112:	4b91      	ldr	r3, [pc, #580]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a90      	ldr	r2, [pc, #576]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a8a      	ldr	r2, [pc, #552]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a87      	ldr	r2, [pc, #540]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002144:	4b84      	ldr	r3, [pc, #528]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a83      	ldr	r2, [pc, #524]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b81      	ldr	r3, [pc, #516]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a80      	ldr	r2, [pc, #512]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fce8 	bl	8001b38 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fce4 	bl	8001b38 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1fb      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xc0>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff fcd4 	bl	8001b38 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fcd0 	bl	8001b38 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1e7      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0xe8>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d063      	beq.n	800228a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c2:	4b65      	ldr	r3, [pc, #404]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b62      	ldr	r3, [pc, #392]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b5f      	ldr	r3, [pc, #380]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b5c      	ldr	r3, [pc, #368]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1bb      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b56      	ldr	r3, [pc, #344]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4952      	ldr	r1, [pc, #328]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e03a      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b4f      	ldr	r3, [pc, #316]	; (800235c <HAL_RCC_OscConfig+0x2b0>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff fc89 	bl	8001b38 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff fc85 	bl	8001b38 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e19c      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4940      	ldr	r1, [pc, #256]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b3f      	ldr	r3, [pc, #252]	; (800235c <HAL_RCC_OscConfig+0x2b0>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff fc68 	bl	8001b38 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226c:	f7ff fc64 	bl	8001b38 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e17b      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d030      	beq.n	80022f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCC_OscConfig+0x2b4>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff fc48 	bl	8001b38 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7ff fc44 	bl	8001b38 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e15b      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x200>
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x2b4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7ff fc31 	bl	8001b38 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7ff fc2d 	bl	8001b38 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e144      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a0 	beq.w	8002446 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002332:	2301      	movs	r3, #1
 8002334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_OscConfig+0x2b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d121      	bne.n	8002386 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_RCC_OscConfig+0x2b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_RCC_OscConfig+0x2b8>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234e:	f7ff fbf3 	bl	8001b38 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	e011      	b.n	800237a <HAL_RCC_OscConfig+0x2ce>
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	42470000 	.word	0x42470000
 8002360:	42470e80 	.word	0x42470e80
 8002364:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7ff fbe6 	bl	8001b38 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e0fd      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_RCC_OscConfig+0x4d4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x2f0>
 800238e:	4b7d      	ldr	r3, [pc, #500]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a7c      	ldr	r2, [pc, #496]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
 800239a:	e01c      	b.n	80023d6 <HAL_RCC_OscConfig+0x32a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x312>
 80023a4:	4b77      	ldr	r3, [pc, #476]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a76      	ldr	r2, [pc, #472]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
 80023b0:	4b74      	ldr	r3, [pc, #464]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a73      	ldr	r2, [pc, #460]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
 80023bc:	e00b      	b.n	80023d6 <HAL_RCC_OscConfig+0x32a>
 80023be:	4b71      	ldr	r3, [pc, #452]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a70      	ldr	r2, [pc, #448]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	4b6e      	ldr	r3, [pc, #440]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a6d      	ldr	r2, [pc, #436]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7ff fbab 	bl	8001b38 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff fba7 	bl	8001b38 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0bc      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	4b61      	ldr	r3, [pc, #388]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ee      	beq.n	80023e6 <HAL_RCC_OscConfig+0x33a>
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7ff fb95 	bl	8001b38 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7ff fb91 	bl	8001b38 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0a6      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	4b56      	ldr	r3, [pc, #344]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4b52      	ldr	r3, [pc, #328]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a51      	ldr	r2, [pc, #324]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8092 	beq.w	8002574 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002450:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d05c      	beq.n	8002516 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d141      	bne.n	80024e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b48      	ldr	r3, [pc, #288]	; (8002588 <HAL_RCC_OscConfig+0x4dc>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff fb65 	bl	8001b38 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002472:	f7ff fb61 	bl	8001b38 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e078      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69da      	ldr	r2, [r3, #28]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	019b      	lsls	r3, r3, #6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	3b01      	subs	r3, #1
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	061b      	lsls	r3, r3, #24
 80024b4:	4933      	ldr	r1, [pc, #204]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_RCC_OscConfig+0x4dc>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fb3a 	bl	8001b38 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff fb36 	bl	8001b38 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e04d      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x41c>
 80024e6:	e045      	b.n	8002574 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x4dc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff fb23 	bl	8001b38 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff fb1f 	bl	8001b38 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e036      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x44a>
 8002514:	e02e      	b.n	8002574 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e029      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	429a      	cmp	r2, r3
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d115      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800254a:	4013      	ands	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002550:	4293      	cmp	r3, r2
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d106      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40007000 	.word	0x40007000
 8002584:	40023800 	.word	0x40023800
 8002588:	42470060 	.word	0x42470060

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cc      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d90c      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b65      	ldr	r3, [pc, #404]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d044      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d119      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002646:	2b03      	cmp	r3, #3
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e067      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b37      	ldr	r3, [pc, #220]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4934      	ldr	r1, [pc, #208]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7ff fa5c 	bl	8001b38 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7ff fa58 	bl	8001b38 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d20c      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f821 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002716:	4601      	mov	r1, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	fa21 f303 	lsr.w	r3, r1, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f9bc 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00
 8002748:	40023800 	.word	0x40023800
 800274c:	08004058 	.word	0x08004058
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	2300      	movs	r3, #0
 8002768:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b04      	cmp	r3, #4
 8002778:	d007      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x32>
 800277a:	2b08      	cmp	r3, #8
 800277c:	d008      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x38>
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 80b4 	bne.w	80028ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002784:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002786:	60bb      	str	r3, [r7, #8]
       break;
 8002788:	e0b3      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800278a:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800278c:	60bb      	str	r3, [r7, #8]
      break;
 800278e:	e0b0      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002798:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800279a:	4b58      	ldr	r3, [pc, #352]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d04a      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a6:	4b55      	ldr	r3, [pc, #340]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	099b      	lsrs	r3, r3, #6
 80027ac:	f04f 0400 	mov.w	r4, #0
 80027b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	ea03 0501 	and.w	r5, r3, r1
 80027bc:	ea04 0602 	and.w	r6, r4, r2
 80027c0:	4629      	mov	r1, r5
 80027c2:	4632      	mov	r2, r6
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	f04f 0400 	mov.w	r4, #0
 80027cc:	0154      	lsls	r4, r2, #5
 80027ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027d2:	014b      	lsls	r3, r1, #5
 80027d4:	4619      	mov	r1, r3
 80027d6:	4622      	mov	r2, r4
 80027d8:	1b49      	subs	r1, r1, r5
 80027da:	eb62 0206 	sbc.w	r2, r2, r6
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	f04f 0400 	mov.w	r4, #0
 80027e6:	0194      	lsls	r4, r2, #6
 80027e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027ec:	018b      	lsls	r3, r1, #6
 80027ee:	1a5b      	subs	r3, r3, r1
 80027f0:	eb64 0402 	sbc.w	r4, r4, r2
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	00e2      	lsls	r2, r4, #3
 80027fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002802:	00d9      	lsls	r1, r3, #3
 8002804:	460b      	mov	r3, r1
 8002806:	4614      	mov	r4, r2
 8002808:	195b      	adds	r3, r3, r5
 800280a:	eb44 0406 	adc.w	r4, r4, r6
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	0262      	lsls	r2, r4, #9
 8002818:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800281c:	0259      	lsls	r1, r3, #9
 800281e:	460b      	mov	r3, r1
 8002820:	4614      	mov	r4, r2
 8002822:	4618      	mov	r0, r3
 8002824:	4621      	mov	r1, r4
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f04f 0400 	mov.w	r4, #0
 800282c:	461a      	mov	r2, r3
 800282e:	4623      	mov	r3, r4
 8002830:	f7fd fde0 	bl	80003f4 <__aeabi_uldivmod>
 8002834:	4603      	mov	r3, r0
 8002836:	460c      	mov	r4, r1
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e049      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283c:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	f04f 0400 	mov.w	r4, #0
 8002846:	f240 11ff 	movw	r1, #511	; 0x1ff
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	ea03 0501 	and.w	r5, r3, r1
 8002852:	ea04 0602 	and.w	r6, r4, r2
 8002856:	4629      	mov	r1, r5
 8002858:	4632      	mov	r2, r6
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	f04f 0400 	mov.w	r4, #0
 8002862:	0154      	lsls	r4, r2, #5
 8002864:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002868:	014b      	lsls	r3, r1, #5
 800286a:	4619      	mov	r1, r3
 800286c:	4622      	mov	r2, r4
 800286e:	1b49      	subs	r1, r1, r5
 8002870:	eb62 0206 	sbc.w	r2, r2, r6
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	f04f 0400 	mov.w	r4, #0
 800287c:	0194      	lsls	r4, r2, #6
 800287e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	1a5b      	subs	r3, r3, r1
 8002886:	eb64 0402 	sbc.w	r4, r4, r2
 800288a:	f04f 0100 	mov.w	r1, #0
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	00e2      	lsls	r2, r4, #3
 8002894:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002898:	00d9      	lsls	r1, r3, #3
 800289a:	460b      	mov	r3, r1
 800289c:	4614      	mov	r4, r2
 800289e:	195b      	adds	r3, r3, r5
 80028a0:	eb44 0406 	adc.w	r4, r4, r6
 80028a4:	f04f 0100 	mov.w	r1, #0
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	02a2      	lsls	r2, r4, #10
 80028ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028b2:	0299      	lsls	r1, r3, #10
 80028b4:	460b      	mov	r3, r1
 80028b6:	4614      	mov	r4, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	4621      	mov	r1, r4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f04f 0400 	mov.w	r4, #0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4623      	mov	r3, r4
 80028c6:	f7fd fd95 	bl	80003f4 <__aeabi_uldivmod>
 80028ca:	4603      	mov	r3, r0
 80028cc:	460c      	mov	r4, r1
 80028ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	60bb      	str	r3, [r7, #8]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028ee:	60bb      	str	r3, [r7, #8]
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	68bb      	ldr	r3, [r7, #8]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	00f42400 	.word	0x00f42400
 8002904:	007a1200 	.word	0x007a1200

08002908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_RCC_GetHCLKFreq+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000000 	.word	0x20000000

08002920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002924:	f7ff fff0 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002928:	4601      	mov	r1, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0a9b      	lsrs	r3, r3, #10
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4a03      	ldr	r2, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	08004068 	.word	0x08004068

08002948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800294c:	f7ff ffdc 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002950:	4601      	mov	r1, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	0b5b      	lsrs	r3, r3, #13
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4a03      	ldr	r2, [pc, #12]	; (800296c <HAL_RCC_GetPCLK2Freq+0x24>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800
 800296c:	08004068 	.word	0x08004068

08002970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e01d      	b.n	80029be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe ff2a 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f000 fc02 	bl	80031b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d007      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e01d      	b.n	8002a5c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7fe ff01 	bl	800183c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f000 fbb3 	bl	80031b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2201      	movs	r2, #1
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fe44 	bl	8003704 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a10      	ldr	r2, [pc, #64]	; (8002ac4 <HAL_TIM_PWM_Start+0x60>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d107      	bne.n	8002a96 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b06      	cmp	r3, #6
 8002aa6:	d007      	beq.n	8002ab8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000

08002ac8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e083      	b.n	8002be4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe fe35 	bl	8001760 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b0c:	f023 0307 	bic.w	r3, r3, #7
 8002b10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f000 fb4b 	bl	80031b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b68:	f023 030c 	bic.w	r3, r3, #12
 8002b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	4313      	orrs	r3, r2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	011a      	lsls	r2, r3, #4
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	031b      	lsls	r3, r3, #12
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ba6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_TIM_Encoder_Start+0x16>
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d008      	beq.n	8002c12 <HAL_TIM_Encoder_Start+0x26>
 8002c00:	e00f      	b.n	8002c22 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fd7a 	bl	8003704 <TIM_CCxChannelCmd>
      break;
 8002c10:	e016      	b.n	8002c40 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	2104      	movs	r1, #4
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fd72 	bl	8003704 <TIM_CCxChannelCmd>
      break;
 8002c20:	e00e      	b.n	8002c40 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fd6a 	bl	8003704 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2201      	movs	r2, #1
 8002c36:	2104      	movs	r1, #4
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fd63 	bl	8003704 <TIM_CCxChannelCmd>
      break;
 8002c3e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d122      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d11b      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f06f 0202 	mvn.w	r2, #2
 8002c86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fa6c 	bl	800317a <HAL_TIM_IC_CaptureCallback>
 8002ca2:	e005      	b.n	8002cb0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fa5e 	bl	8003166 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa6f 	bl	800318e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d122      	bne.n	8002d0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d11b      	bne.n	8002d0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f06f 0204 	mvn.w	r2, #4
 8002cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fa42 	bl	800317a <HAL_TIM_IC_CaptureCallback>
 8002cf6:	e005      	b.n	8002d04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fa34 	bl	8003166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa45 	bl	800318e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d122      	bne.n	8002d5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d11b      	bne.n	8002d5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f06f 0208 	mvn.w	r2, #8
 8002d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2204      	movs	r2, #4
 8002d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fa18 	bl	800317a <HAL_TIM_IC_CaptureCallback>
 8002d4a:	e005      	b.n	8002d58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa0a 	bl	8003166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa1b 	bl	800318e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d122      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d11b      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f06f 0210 	mvn.w	r2, #16
 8002d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2208      	movs	r2, #8
 8002d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f9ee 	bl	800317a <HAL_TIM_IC_CaptureCallback>
 8002d9e:	e005      	b.n	8002dac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f9e0 	bl	8003166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f9f1 	bl	800318e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10e      	bne.n	8002dde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f06f 0201 	mvn.w	r2, #1
 8002dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fe fb75 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d10e      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d107      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fd1b 	bl	8003840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d10e      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d107      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f9b6 	bl	80031a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d10e      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d107      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0220 	mvn.w	r2, #32
 8002e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fce5 	bl	800382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0b4      	b.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b0c      	cmp	r3, #12
 8002e9a:	f200 809f 	bhi.w	8002fdc <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002ed9 	.word	0x08002ed9
 8002ea8:	08002fdd 	.word	0x08002fdd
 8002eac:	08002fdd 	.word	0x08002fdd
 8002eb0:	08002fdd 	.word	0x08002fdd
 8002eb4:	08002f19 	.word	0x08002f19
 8002eb8:	08002fdd 	.word	0x08002fdd
 8002ebc:	08002fdd 	.word	0x08002fdd
 8002ec0:	08002fdd 	.word	0x08002fdd
 8002ec4:	08002f5b 	.word	0x08002f5b
 8002ec8:	08002fdd 	.word	0x08002fdd
 8002ecc:	08002fdd 	.word	0x08002fdd
 8002ed0:	08002fdd 	.word	0x08002fdd
 8002ed4:	08002f9b 	.word	0x08002f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f9ea 	bl	80032b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0208 	orr.w	r2, r2, #8
 8002ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	619a      	str	r2, [r3, #24]
      break;
 8002f16:	e062      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa30 	bl	8003384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	021a      	lsls	r2, r3, #8
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	619a      	str	r2, [r3, #24]
      break;
 8002f58:	e041      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fa7b 	bl	800345c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0208 	orr.w	r2, r2, #8
 8002f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0204 	bic.w	r2, r2, #4
 8002f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	61da      	str	r2, [r3, #28]
      break;
 8002f98:	e021      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fac5 	bl	8003530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	021a      	lsls	r2, r3, #8
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	61da      	str	r2, [r3, #28]
      break;
 8002fda:	e000      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002fdc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIM_ConfigClockSource+0x18>
 800300c:	2302      	movs	r3, #2
 800300e:	e0a6      	b.n	800315e <HAL_TIM_ConfigClockSource+0x166>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800302e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003036:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d067      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x120>
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d80b      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x6c>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d073      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0x140>
 8003050:	2b10      	cmp	r3, #16
 8003052:	d802      	bhi.n	800305a <HAL_TIM_ConfigClockSource+0x62>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d06f      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003058:	e078      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800305a:	2b20      	cmp	r3, #32
 800305c:	d06c      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0x140>
 800305e:	2b30      	cmp	r3, #48	; 0x30
 8003060:	d06a      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003062:	e073      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003064:	2b70      	cmp	r3, #112	; 0x70
 8003066:	d00d      	beq.n	8003084 <HAL_TIM_ConfigClockSource+0x8c>
 8003068:	2b70      	cmp	r3, #112	; 0x70
 800306a:	d804      	bhi.n	8003076 <HAL_TIM_ConfigClockSource+0x7e>
 800306c:	2b50      	cmp	r3, #80	; 0x50
 800306e:	d033      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0xe0>
 8003070:	2b60      	cmp	r3, #96	; 0x60
 8003072:	d041      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003074:	e06a      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307a:	d066      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x152>
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003080:	d017      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003082:	e063      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f000 fb16 	bl	80036c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	609a      	str	r2, [r3, #8]
      break;
 80030b0:	e04c      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f000 faff 	bl	80036c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d4:	609a      	str	r2, [r3, #8]
      break;
 80030d6:	e039      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	461a      	mov	r2, r3
 80030e6:	f000 fa73 	bl	80035d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2150      	movs	r1, #80	; 0x50
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 facc 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 80030f6:	e029      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	461a      	mov	r2, r3
 8003106:	f000 fa92 	bl	800362e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2160      	movs	r1, #96	; 0x60
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fabc 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003116:	e019      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	461a      	mov	r2, r3
 8003126:	f000 fa53 	bl	80035d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2140      	movs	r1, #64	; 0x40
 8003130:	4618      	mov	r0, r3
 8003132:	f000 faac 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003136:	e009      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f000 faa3 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003148:	e000      	b.n	800314c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800314a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a34      	ldr	r2, [pc, #208]	; (800329c <TIM_Base_SetConfig+0xe4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00f      	beq.n	80031f0 <TIM_Base_SetConfig+0x38>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d6:	d00b      	beq.n	80031f0 <TIM_Base_SetConfig+0x38>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a31      	ldr	r2, [pc, #196]	; (80032a0 <TIM_Base_SetConfig+0xe8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <TIM_Base_SetConfig+0x38>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a30      	ldr	r2, [pc, #192]	; (80032a4 <TIM_Base_SetConfig+0xec>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_Base_SetConfig+0x38>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a2f      	ldr	r2, [pc, #188]	; (80032a8 <TIM_Base_SetConfig+0xf0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d108      	bne.n	8003202 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a25      	ldr	r2, [pc, #148]	; (800329c <TIM_Base_SetConfig+0xe4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01b      	beq.n	8003242 <TIM_Base_SetConfig+0x8a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003210:	d017      	beq.n	8003242 <TIM_Base_SetConfig+0x8a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <TIM_Base_SetConfig+0xe8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <TIM_Base_SetConfig+0x8a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <TIM_Base_SetConfig+0xec>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00f      	beq.n	8003242 <TIM_Base_SetConfig+0x8a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a20      	ldr	r2, [pc, #128]	; (80032a8 <TIM_Base_SetConfig+0xf0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_Base_SetConfig+0x8a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <TIM_Base_SetConfig+0xf4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <TIM_Base_SetConfig+0x8a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <TIM_Base_SetConfig+0xf8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_Base_SetConfig+0x8a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <TIM_Base_SetConfig+0xfc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d108      	bne.n	8003254 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a08      	ldr	r2, [pc, #32]	; (800329c <TIM_Base_SetConfig+0xe4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	615a      	str	r2, [r3, #20]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40010000 	.word	0x40010000
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40000800 	.word	0x40000800
 80032a8:	40000c00 	.word	0x40000c00
 80032ac:	40014000 	.word	0x40014000
 80032b0:	40014400 	.word	0x40014400
 80032b4:	40014800 	.word	0x40014800

080032b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	f023 0201 	bic.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0303 	bic.w	r3, r3, #3
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 0302 	bic.w	r3, r3, #2
 8003300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <TIM_OC1_SetConfig+0xc8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10c      	bne.n	800332e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0308 	bic.w	r3, r3, #8
 800331a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <TIM_OC1_SetConfig+0xc8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d111      	bne.n	800335a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800333c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	621a      	str	r2, [r3, #32]
}
 8003374:	bf00      	nop
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40010000 	.word	0x40010000

08003384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f023 0210 	bic.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0320 	bic.w	r3, r3, #32
 80033ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <TIM_OC2_SetConfig+0xd4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10d      	bne.n	8003400 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <TIM_OC2_SetConfig+0xd4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d113      	bne.n	8003430 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800340e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40010000 	.word	0x40010000

0800345c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <TIM_OC3_SetConfig+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10d      	bne.n	80034d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a14      	ldr	r2, [pc, #80]	; (800352c <TIM_OC3_SetConfig+0xd0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d113      	bne.n	8003506 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40010000 	.word	0x40010000

08003530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800357a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	031b      	lsls	r3, r3, #12
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a10      	ldr	r2, [pc, #64]	; (80035cc <TIM_OC4_SetConfig+0x9c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000

080035d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f023 0201 	bic.w	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f023 030a 	bic.w	r3, r3, #10
 800360c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800362e:	b480      	push	{r7}
 8003630:	b087      	sub	sp, #28
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f023 0210 	bic.w	r2, r3, #16
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003658:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	031b      	lsls	r3, r3, #12
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800366a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f043 0307 	orr.w	r3, r3, #7
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	609a      	str	r2, [r3, #8]
}
 80036f8:	bf00      	nop
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2201      	movs	r2, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1a      	ldr	r2, [r3, #32]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	43db      	mvns	r3, r3
 8003726:	401a      	ands	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	431a      	orrs	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003764:	2302      	movs	r3, #2
 8003766:	e050      	b.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d018      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d013      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10c      	bne.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40014000 	.word	0x40014000

0800382c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e03f      	b.n	80038e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe f83a 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f829 	bl	80038f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003932:	f023 030c 	bic.w	r3, r3, #12
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	68f9      	ldr	r1, [r7, #12]
 800393c:	430b      	orrs	r3, r1
 800393e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395e:	f040 818b 	bne.w	8003c78 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4ac1      	ldr	r2, [pc, #772]	; (8003c6c <UART_SetConfig+0x37c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d005      	beq.n	8003978 <UART_SetConfig+0x88>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4abf      	ldr	r2, [pc, #764]	; (8003c70 <UART_SetConfig+0x380>)
 8003972:	4293      	cmp	r3, r2
 8003974:	f040 80bd 	bne.w	8003af2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003978:	f7fe ffe6 	bl	8002948 <HAL_RCC_GetPCLK2Freq>
 800397c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	461d      	mov	r5, r3
 8003982:	f04f 0600 	mov.w	r6, #0
 8003986:	46a8      	mov	r8, r5
 8003988:	46b1      	mov	r9, r6
 800398a:	eb18 0308 	adds.w	r3, r8, r8
 800398e:	eb49 0409 	adc.w	r4, r9, r9
 8003992:	4698      	mov	r8, r3
 8003994:	46a1      	mov	r9, r4
 8003996:	eb18 0805 	adds.w	r8, r8, r5
 800399a:	eb49 0906 	adc.w	r9, r9, r6
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039b2:	4688      	mov	r8, r1
 80039b4:	4691      	mov	r9, r2
 80039b6:	eb18 0005 	adds.w	r0, r8, r5
 80039ba:	eb49 0106 	adc.w	r1, r9, r6
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	461d      	mov	r5, r3
 80039c4:	f04f 0600 	mov.w	r6, #0
 80039c8:	196b      	adds	r3, r5, r5
 80039ca:	eb46 0406 	adc.w	r4, r6, r6
 80039ce:	461a      	mov	r2, r3
 80039d0:	4623      	mov	r3, r4
 80039d2:	f7fc fd0f 	bl	80003f4 <__aeabi_uldivmod>
 80039d6:	4603      	mov	r3, r0
 80039d8:	460c      	mov	r4, r1
 80039da:	461a      	mov	r2, r3
 80039dc:	4ba5      	ldr	r3, [pc, #660]	; (8003c74 <UART_SetConfig+0x384>)
 80039de:	fba3 2302 	umull	r2, r3, r3, r2
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	461d      	mov	r5, r3
 80039ec:	f04f 0600 	mov.w	r6, #0
 80039f0:	46a9      	mov	r9, r5
 80039f2:	46b2      	mov	sl, r6
 80039f4:	eb19 0309 	adds.w	r3, r9, r9
 80039f8:	eb4a 040a 	adc.w	r4, sl, sl
 80039fc:	4699      	mov	r9, r3
 80039fe:	46a2      	mov	sl, r4
 8003a00:	eb19 0905 	adds.w	r9, r9, r5
 8003a04:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a1c:	4689      	mov	r9, r1
 8003a1e:	4692      	mov	sl, r2
 8003a20:	eb19 0005 	adds.w	r0, r9, r5
 8003a24:	eb4a 0106 	adc.w	r1, sl, r6
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	461d      	mov	r5, r3
 8003a2e:	f04f 0600 	mov.w	r6, #0
 8003a32:	196b      	adds	r3, r5, r5
 8003a34:	eb46 0406 	adc.w	r4, r6, r6
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	f7fc fcda 	bl	80003f4 <__aeabi_uldivmod>
 8003a40:	4603      	mov	r3, r0
 8003a42:	460c      	mov	r4, r1
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b8b      	ldr	r3, [pc, #556]	; (8003c74 <UART_SetConfig+0x384>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	2164      	movs	r1, #100	; 0x64
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	3332      	adds	r3, #50	; 0x32
 8003a5a:	4a86      	ldr	r2, [pc, #536]	; (8003c74 <UART_SetConfig+0x384>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a68:	4498      	add	r8, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	461d      	mov	r5, r3
 8003a6e:	f04f 0600 	mov.w	r6, #0
 8003a72:	46a9      	mov	r9, r5
 8003a74:	46b2      	mov	sl, r6
 8003a76:	eb19 0309 	adds.w	r3, r9, r9
 8003a7a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a7e:	4699      	mov	r9, r3
 8003a80:	46a2      	mov	sl, r4
 8003a82:	eb19 0905 	adds.w	r9, r9, r5
 8003a86:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a9e:	4689      	mov	r9, r1
 8003aa0:	4692      	mov	sl, r2
 8003aa2:	eb19 0005 	adds.w	r0, r9, r5
 8003aa6:	eb4a 0106 	adc.w	r1, sl, r6
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	461d      	mov	r5, r3
 8003ab0:	f04f 0600 	mov.w	r6, #0
 8003ab4:	196b      	adds	r3, r5, r5
 8003ab6:	eb46 0406 	adc.w	r4, r6, r6
 8003aba:	461a      	mov	r2, r3
 8003abc:	4623      	mov	r3, r4
 8003abe:	f7fc fc99 	bl	80003f4 <__aeabi_uldivmod>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <UART_SetConfig+0x384>)
 8003aca:	fba3 1302 	umull	r1, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2164      	movs	r1, #100	; 0x64
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	3332      	adds	r3, #50	; 0x32
 8003adc:	4a65      	ldr	r2, [pc, #404]	; (8003c74 <UART_SetConfig+0x384>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	f003 0207 	and.w	r2, r3, #7
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4442      	add	r2, r8
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	e26f      	b.n	8003fd2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003af2:	f7fe ff15 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8003af6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	461d      	mov	r5, r3
 8003afc:	f04f 0600 	mov.w	r6, #0
 8003b00:	46a8      	mov	r8, r5
 8003b02:	46b1      	mov	r9, r6
 8003b04:	eb18 0308 	adds.w	r3, r8, r8
 8003b08:	eb49 0409 	adc.w	r4, r9, r9
 8003b0c:	4698      	mov	r8, r3
 8003b0e:	46a1      	mov	r9, r4
 8003b10:	eb18 0805 	adds.w	r8, r8, r5
 8003b14:	eb49 0906 	adc.w	r9, r9, r6
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b2c:	4688      	mov	r8, r1
 8003b2e:	4691      	mov	r9, r2
 8003b30:	eb18 0005 	adds.w	r0, r8, r5
 8003b34:	eb49 0106 	adc.w	r1, r9, r6
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	461d      	mov	r5, r3
 8003b3e:	f04f 0600 	mov.w	r6, #0
 8003b42:	196b      	adds	r3, r5, r5
 8003b44:	eb46 0406 	adc.w	r4, r6, r6
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	f7fc fc52 	bl	80003f4 <__aeabi_uldivmod>
 8003b50:	4603      	mov	r3, r0
 8003b52:	460c      	mov	r4, r1
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <UART_SetConfig+0x384>)
 8003b58:	fba3 2302 	umull	r2, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	461d      	mov	r5, r3
 8003b66:	f04f 0600 	mov.w	r6, #0
 8003b6a:	46a9      	mov	r9, r5
 8003b6c:	46b2      	mov	sl, r6
 8003b6e:	eb19 0309 	adds.w	r3, r9, r9
 8003b72:	eb4a 040a 	adc.w	r4, sl, sl
 8003b76:	4699      	mov	r9, r3
 8003b78:	46a2      	mov	sl, r4
 8003b7a:	eb19 0905 	adds.w	r9, r9, r5
 8003b7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b96:	4689      	mov	r9, r1
 8003b98:	4692      	mov	sl, r2
 8003b9a:	eb19 0005 	adds.w	r0, r9, r5
 8003b9e:	eb4a 0106 	adc.w	r1, sl, r6
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	f04f 0600 	mov.w	r6, #0
 8003bac:	196b      	adds	r3, r5, r5
 8003bae:	eb46 0406 	adc.w	r4, r6, r6
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	f7fc fc1d 	bl	80003f4 <__aeabi_uldivmod>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <UART_SetConfig+0x384>)
 8003bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2164      	movs	r1, #100	; 0x64
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	3332      	adds	r3, #50	; 0x32
 8003bd4:	4a27      	ldr	r2, [pc, #156]	; (8003c74 <UART_SetConfig+0x384>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003be2:	4498      	add	r8, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	461d      	mov	r5, r3
 8003be8:	f04f 0600 	mov.w	r6, #0
 8003bec:	46a9      	mov	r9, r5
 8003bee:	46b2      	mov	sl, r6
 8003bf0:	eb19 0309 	adds.w	r3, r9, r9
 8003bf4:	eb4a 040a 	adc.w	r4, sl, sl
 8003bf8:	4699      	mov	r9, r3
 8003bfa:	46a2      	mov	sl, r4
 8003bfc:	eb19 0905 	adds.w	r9, r9, r5
 8003c00:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c18:	4689      	mov	r9, r1
 8003c1a:	4692      	mov	sl, r2
 8003c1c:	eb19 0005 	adds.w	r0, r9, r5
 8003c20:	eb4a 0106 	adc.w	r1, sl, r6
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	461d      	mov	r5, r3
 8003c2a:	f04f 0600 	mov.w	r6, #0
 8003c2e:	196b      	adds	r3, r5, r5
 8003c30:	eb46 0406 	adc.w	r4, r6, r6
 8003c34:	461a      	mov	r2, r3
 8003c36:	4623      	mov	r3, r4
 8003c38:	f7fc fbdc 	bl	80003f4 <__aeabi_uldivmod>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <UART_SetConfig+0x384>)
 8003c44:	fba3 1302 	umull	r1, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2164      	movs	r1, #100	; 0x64
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	3332      	adds	r3, #50	; 0x32
 8003c56:	4a07      	ldr	r2, [pc, #28]	; (8003c74 <UART_SetConfig+0x384>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 0207 	and.w	r2, r3, #7
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4442      	add	r2, r8
 8003c68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c6a:	e1b2      	b.n	8003fd2 <UART_SetConfig+0x6e2>
 8003c6c:	40011000 	.word	0x40011000
 8003c70:	40011400 	.word	0x40011400
 8003c74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4ad7      	ldr	r2, [pc, #860]	; (8003fdc <UART_SetConfig+0x6ec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d005      	beq.n	8003c8e <UART_SetConfig+0x39e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4ad6      	ldr	r2, [pc, #856]	; (8003fe0 <UART_SetConfig+0x6f0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	f040 80d1 	bne.w	8003e30 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c8e:	f7fe fe5b 	bl	8002948 <HAL_RCC_GetPCLK2Freq>
 8003c92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	469a      	mov	sl, r3
 8003c98:	f04f 0b00 	mov.w	fp, #0
 8003c9c:	46d0      	mov	r8, sl
 8003c9e:	46d9      	mov	r9, fp
 8003ca0:	eb18 0308 	adds.w	r3, r8, r8
 8003ca4:	eb49 0409 	adc.w	r4, r9, r9
 8003ca8:	4698      	mov	r8, r3
 8003caa:	46a1      	mov	r9, r4
 8003cac:	eb18 080a 	adds.w	r8, r8, sl
 8003cb0:	eb49 090b 	adc.w	r9, r9, fp
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cc8:	4688      	mov	r8, r1
 8003cca:	4691      	mov	r9, r2
 8003ccc:	eb1a 0508 	adds.w	r5, sl, r8
 8003cd0:	eb4b 0609 	adc.w	r6, fp, r9
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	f04f 0400 	mov.w	r4, #0
 8003ce6:	0094      	lsls	r4, r2, #2
 8003ce8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cec:	008b      	lsls	r3, r1, #2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	f7fc fb7d 	bl	80003f4 <__aeabi_uldivmod>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4bb8      	ldr	r3, [pc, #736]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003d02:	fba3 2302 	umull	r2, r3, r3, r2
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	469b      	mov	fp, r3
 8003d10:	f04f 0c00 	mov.w	ip, #0
 8003d14:	46d9      	mov	r9, fp
 8003d16:	46e2      	mov	sl, ip
 8003d18:	eb19 0309 	adds.w	r3, r9, r9
 8003d1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d20:	4699      	mov	r9, r3
 8003d22:	46a2      	mov	sl, r4
 8003d24:	eb19 090b 	adds.w	r9, r9, fp
 8003d28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d40:	4689      	mov	r9, r1
 8003d42:	4692      	mov	sl, r2
 8003d44:	eb1b 0509 	adds.w	r5, fp, r9
 8003d48:	eb4c 060a 	adc.w	r6, ip, sl
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4619      	mov	r1, r3
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	f04f 0400 	mov.w	r4, #0
 8003d5e:	0094      	lsls	r4, r2, #2
 8003d60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d64:	008b      	lsls	r3, r1, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	4623      	mov	r3, r4
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	4631      	mov	r1, r6
 8003d6e:	f7fc fb41 	bl	80003f4 <__aeabi_uldivmod>
 8003d72:	4603      	mov	r3, r0
 8003d74:	460c      	mov	r4, r1
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b9a      	ldr	r3, [pc, #616]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2164      	movs	r1, #100	; 0x64
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	3332      	adds	r3, #50	; 0x32
 8003d8c:	4a95      	ldr	r2, [pc, #596]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d98:	4498      	add	r8, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	469b      	mov	fp, r3
 8003d9e:	f04f 0c00 	mov.w	ip, #0
 8003da2:	46d9      	mov	r9, fp
 8003da4:	46e2      	mov	sl, ip
 8003da6:	eb19 0309 	adds.w	r3, r9, r9
 8003daa:	eb4a 040a 	adc.w	r4, sl, sl
 8003dae:	4699      	mov	r9, r3
 8003db0:	46a2      	mov	sl, r4
 8003db2:	eb19 090b 	adds.w	r9, r9, fp
 8003db6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dba:	f04f 0100 	mov.w	r1, #0
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dce:	4689      	mov	r9, r1
 8003dd0:	4692      	mov	sl, r2
 8003dd2:	eb1b 0509 	adds.w	r5, fp, r9
 8003dd6:	eb4c 060a 	adc.w	r6, ip, sl
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4619      	mov	r1, r3
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	f04f 0400 	mov.w	r4, #0
 8003dec:	0094      	lsls	r4, r2, #2
 8003dee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003df2:	008b      	lsls	r3, r1, #2
 8003df4:	461a      	mov	r2, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	f7fc fafa 	bl	80003f4 <__aeabi_uldivmod>
 8003e00:	4603      	mov	r3, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b77      	ldr	r3, [pc, #476]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003e08:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	2164      	movs	r1, #100	; 0x64
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	3332      	adds	r3, #50	; 0x32
 8003e1a:	4a72      	ldr	r2, [pc, #456]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	f003 020f 	and.w	r2, r3, #15
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4442      	add	r2, r8
 8003e2c:	609a      	str	r2, [r3, #8]
 8003e2e:	e0d0      	b.n	8003fd2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7fe fd76 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8003e34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	469a      	mov	sl, r3
 8003e3a:	f04f 0b00 	mov.w	fp, #0
 8003e3e:	46d0      	mov	r8, sl
 8003e40:	46d9      	mov	r9, fp
 8003e42:	eb18 0308 	adds.w	r3, r8, r8
 8003e46:	eb49 0409 	adc.w	r4, r9, r9
 8003e4a:	4698      	mov	r8, r3
 8003e4c:	46a1      	mov	r9, r4
 8003e4e:	eb18 080a 	adds.w	r8, r8, sl
 8003e52:	eb49 090b 	adc.w	r9, r9, fp
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e6a:	4688      	mov	r8, r1
 8003e6c:	4691      	mov	r9, r2
 8003e6e:	eb1a 0508 	adds.w	r5, sl, r8
 8003e72:	eb4b 0609 	adc.w	r6, fp, r9
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	f04f 0400 	mov.w	r4, #0
 8003e88:	0094      	lsls	r4, r2, #2
 8003e8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e8e:	008b      	lsls	r3, r1, #2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4623      	mov	r3, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	4631      	mov	r1, r6
 8003e98:	f7fc faac 	bl	80003f4 <__aeabi_uldivmod>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b50      	ldr	r3, [pc, #320]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	469b      	mov	fp, r3
 8003eb2:	f04f 0c00 	mov.w	ip, #0
 8003eb6:	46d9      	mov	r9, fp
 8003eb8:	46e2      	mov	sl, ip
 8003eba:	eb19 0309 	adds.w	r3, r9, r9
 8003ebe:	eb4a 040a 	adc.w	r4, sl, sl
 8003ec2:	4699      	mov	r9, r3
 8003ec4:	46a2      	mov	sl, r4
 8003ec6:	eb19 090b 	adds.w	r9, r9, fp
 8003eca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ece:	f04f 0100 	mov.w	r1, #0
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ede:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ee2:	4689      	mov	r9, r1
 8003ee4:	4692      	mov	sl, r2
 8003ee6:	eb1b 0509 	adds.w	r5, fp, r9
 8003eea:	eb4c 060a 	adc.w	r6, ip, sl
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	f04f 0400 	mov.w	r4, #0
 8003f00:	0094      	lsls	r4, r2, #2
 8003f02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f06:	008b      	lsls	r3, r1, #2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	4631      	mov	r1, r6
 8003f10:	f7fc fa70 	bl	80003f4 <__aeabi_uldivmod>
 8003f14:	4603      	mov	r3, r0
 8003f16:	460c      	mov	r4, r1
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	2164      	movs	r1, #100	; 0x64
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	3332      	adds	r3, #50	; 0x32
 8003f2e:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3a:	4498      	add	r8, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	469b      	mov	fp, r3
 8003f40:	f04f 0c00 	mov.w	ip, #0
 8003f44:	46d9      	mov	r9, fp
 8003f46:	46e2      	mov	sl, ip
 8003f48:	eb19 0309 	adds.w	r3, r9, r9
 8003f4c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f50:	4699      	mov	r9, r3
 8003f52:	46a2      	mov	sl, r4
 8003f54:	eb19 090b 	adds.w	r9, r9, fp
 8003f58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f70:	4689      	mov	r9, r1
 8003f72:	4692      	mov	sl, r2
 8003f74:	eb1b 0509 	adds.w	r5, fp, r9
 8003f78:	eb4c 060a 	adc.w	r6, ip, sl
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4619      	mov	r1, r3
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	f04f 0400 	mov.w	r4, #0
 8003f8e:	0094      	lsls	r4, r2, #2
 8003f90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f94:	008b      	lsls	r3, r1, #2
 8003f96:	461a      	mov	r2, r3
 8003f98:	4623      	mov	r3, r4
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	f7fc fa29 	bl	80003f4 <__aeabi_uldivmod>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003faa:	fba3 1302 	umull	r1, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2164      	movs	r1, #100	; 0x64
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	3332      	adds	r3, #50	; 0x32
 8003fbc:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <UART_SetConfig+0x6f4>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	f003 020f 	and.w	r2, r3, #15
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4442      	add	r2, r8
 8003fce:	609a      	str	r2, [r3, #8]
}
 8003fd0:	e7ff      	b.n	8003fd2 <UART_SetConfig+0x6e2>
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	40011400 	.word	0x40011400
 8003fe4:	51eb851f 	.word	0x51eb851f

08003fe8 <__libc_init_array>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	4e0d      	ldr	r6, [pc, #52]	; (8004020 <__libc_init_array+0x38>)
 8003fec:	4c0d      	ldr	r4, [pc, #52]	; (8004024 <__libc_init_array+0x3c>)
 8003fee:	1ba4      	subs	r4, r4, r6
 8003ff0:	10a4      	asrs	r4, r4, #2
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	42a5      	cmp	r5, r4
 8003ff6:	d109      	bne.n	800400c <__libc_init_array+0x24>
 8003ff8:	4e0b      	ldr	r6, [pc, #44]	; (8004028 <__libc_init_array+0x40>)
 8003ffa:	4c0c      	ldr	r4, [pc, #48]	; (800402c <__libc_init_array+0x44>)
 8003ffc:	f000 f820 	bl	8004040 <_init>
 8004000:	1ba4      	subs	r4, r4, r6
 8004002:	10a4      	asrs	r4, r4, #2
 8004004:	2500      	movs	r5, #0
 8004006:	42a5      	cmp	r5, r4
 8004008:	d105      	bne.n	8004016 <__libc_init_array+0x2e>
 800400a:	bd70      	pop	{r4, r5, r6, pc}
 800400c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004010:	4798      	blx	r3
 8004012:	3501      	adds	r5, #1
 8004014:	e7ee      	b.n	8003ff4 <__libc_init_array+0xc>
 8004016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800401a:	4798      	blx	r3
 800401c:	3501      	adds	r5, #1
 800401e:	e7f2      	b.n	8004006 <__libc_init_array+0x1e>
 8004020:	08004078 	.word	0x08004078
 8004024:	08004078 	.word	0x08004078
 8004028:	08004078 	.word	0x08004078
 800402c:	0800407c 	.word	0x0800407c

08004030 <memset>:
 8004030:	4402      	add	r2, r0
 8004032:	4603      	mov	r3, r0
 8004034:	4293      	cmp	r3, r2
 8004036:	d100      	bne.n	800403a <memset+0xa>
 8004038:	4770      	bx	lr
 800403a:	f803 1b01 	strb.w	r1, [r3], #1
 800403e:	e7f9      	b.n	8004034 <memset+0x4>

08004040 <_init>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	bf00      	nop
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr

0800404c <_fini>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr
